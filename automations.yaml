- id: update_Readme
  alias: Update README
  trigger:
  - platform: time
    at: '11:00:00'
  - platform: time
    at: '21:00:00'
  - platform: homeassistant
    event: start
  action:
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - action: readme.generate
    data: {}
  initial_state: true
- alias: Set dark theme for night
  id: dark_theme
  initial_state: true
  trigger:
  - platform: time
    at: '21:00:00'
  - platform: homeassistant
    event: start
  condition:
    condition: time
    after: '20:59:00'
    before: 08:59:00
  action:
  - action: frontend.set_theme
    data:
      name: Google Dark Theme
- alias: Set light theme for day
  id: light_theme
  initial_state: true
  trigger:
  - platform: time
    at: 08:00:00
  - platform: homeassistant
    event: start
  condition:
    condition: time
    after: 07:59:00
    before: '20:59:00'
  action:
    action: frontend.set_theme
    data:
      name: default
- alias: Security Arm/Disarm
  id: arm_disarm
  initial_state: true
  trigger:
    platform: state
    entity_id: input_boolean.security_status
  action:
  - action: script.turn_on
    data:
      entity_id: "{% if trigger.to_state.state == 'on' %}\n  script.security_arm\n{%
        elif trigger.to_state.state == 'off' %}\n  script.security_disarm\n{% endif
        %}\n"
- alias: House Occupied/Empty
  id: occupied_empty
  initial_state: true
  trigger:
  - platform: state
    entity_id: group.trackers
    to: not_home
    for:
      minutes: 1
  - platform: state
    entity_id: group.trackers
    to: home
  condition:
    condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
  - action: script.turn_on
    data:
      entity_id: "{% if trigger.to_state.state == 'home' %}\n  script.home_occupied\n{%
        elif trigger.to_state.state == 'not_home' %}\n  script.home_empty\n{% endif
        %}\n"
  - delay: 00:02:00
- alias: Mount/Umount /Plex
  id: mount_unmount_plex
  initial_state: true
  trigger:
  - platform: state
    entity_id: switch.nas
    from: 'off'
    to: 'on'
    for:
      seconds: 30
  - platform: state
    entity_id: switch.nas
    from: 'on'
    to: 'off'
    for:
      seconds: 30
  action:
    action: "{% if trigger.to_state.state == 'on' %}\n  shell_command.mount_plex\n{%
      elif trigger.to_state.state == 'off' %}\n  shell_command.umount_plex\n{% endif
      %}\n"
- alias: Notify when AC Offline
  id: notify_ac_offline
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.thermostat_online
    to: 'off'
    for: 00:30:00
  action:
  - action: script.notify_wrapper
    data:
      message: The thermostat appears to be offline...
- alias: Notify AC Equipment Event Occurs
  id: notify_ac_equipment_event
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.thermostat_active_equipment_event
  condition: '{{ trigger.to_state.state not in [ ''unavailable'', '''' ] and trigger.from_state.state
    not in [ ''unavailable'', '''' ] }}'
  action:
  - action: script.notify_wrapper
    data:
      message: 'AC Equipment Event: {{ trigger.to_state.state }}'
- alias: Notify when AC setting changes
  id: ac_notify_change
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.thermostat_setpoint
  - platform: state
    entity_id: sensor.thermostat_operating_mode
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.ac_change_notification
      state: 'on'
    - '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
  - action: script.notify_wrapper
    data:
      message: '{% if trigger.entity_id == ''sensor.thermostat_setpoint'' %}Setpoint{%
        elif trigger.entity_id == ''sensor.thermostat_mode'' %}Mode{% endif %}: {{
        states(''sensor.thermostat_setpoint'') }}. Mode: {{ states(''sensor.thermostat_operating_mode'')
        }}'
- alias: HTML5 or Android push notification action button clicked
  id: html5_android_push
  trigger:
  - platform: event
    event_type: html5_notification.clicked
  - platform: event
    event_type: mobile_app_notification_action
  action:
    action: "{% if trigger.event.data.action == 'turn_ac_off' %}\n  script.turn_ac_off\n{%
      endif %}\n"
- alias: Clear Alexa Recording History
  id: alexa_history
  trigger:
    platform: time_pattern
    hours: /12
  action:
  - action: alexa_media.clear_history
- id: update_last_datetimes
  alias: Update 'Last' Datetimes
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kitchen_motion
    - binary_sensor.living_room_motion
    - binary_sensor.hallway_motion
    - binary_sensor.garage_person_occupancy
    - binary_sensor.433_motion_master_bathroom
    from: 'off'
    to: 'on'
  action:
  - if: '{{ trigger.entity_id == ''binary_sensor.garage_person_occupancy'' }}'
    then:
    - action: input_datetime.set_datetime
      data:
        entity_id: input_datetime.garage_motion_last
        datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
    else:
    - action: input_datetime.set_datetime
      data:
        entity_id: input_datetime.{{trigger.entity_id | regex_replace(find='binary_sensor.',
          replace='') | regex_replace(find='input_boolean.', replace='') | regex_replace(find='sensor.',
          replace='') }}_last
        datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
- alias: Door Lock Alerts
  id: door_lock_alerts
  initial_state: true
  trigger:
    platform: state
    entity_id:
    - lock.front_door
    - lock.garage_exterior_door
    - lock.back_door
    to: unlocked
  condition: '{{ states(''input_boolean.door_notify'') == ''on''}}'
  action:
  - action: script.notify_wrapper
    data:
      message: '{{ trigger.to_state.name }} Unlocked'
      data:
        priority: 1
- id: terraform_cloud_webhook
  alias: Terraform Cloud Webhook
  trigger:
  - platform: webhook
    webhook_id: SECRET
    local_only: false
    allowed_methods:
    - POST
  action:
  - action: notify.signal_self
    data:
      message: '{{ trigger.json.notifications[0].message }}: {{ trigger.json.run_url
        }}'
  initial_state: true
- alias: Panic Script Webhook Trigger
  id: panic_script_webhook
  initial_state: true
  trigger:
    platform: webhook
    webhook_id: SECRET
    local_only: false
  action:
  - action: media_player.volume_set
    data:
      entity_id: media_player.master
      volume_level: 0.3
  - action: notify.alexa_media_master
    data:
      data:
        type: tts
      message: Help is on the way
- alias: Bluebubbles Server Webhook
  id: bluebubbles_server_webhook
  initial_state: true
  trigger:
    platform: webhook
    webhook_id: SECRET
    local_only: false
  action:
  - action: input_text.set_value
    target:
      entity_id: input_text.bluebubbles_url
    data:
      value: '{{ trigger.json.data }}'
- alias: Cellular Message Health
  id: cellular_message_health
  trigger:
  - platform: time
    id: reset
    at: 00:00:00
  - platform: time
    id: send_test_message
    at: 09:00:00
  - platform: webhook
    id: mark_healthy
    webhook_id: SECRET
    local_only: false
  - platform: time
    id: evaluate_status
    at: 09:05:00
  action:
  - if: '{{ trigger.id == ''reset'' }}'
    then:
    - action: input_boolean.turn_on
      entity_id: input_boolean.cellular_message_test_pending
  - if: '{{ trigger.id == ''send_test_message'' }}'
    then:
    - action: notify.cellular_message
      data:
        message: t
  - if: '{{ trigger.id == ''mark_healthy'' }}'
    then:
    - action: input_boolean.turn_off
      entity_id: input_boolean.cellular_message_test_pending
  - if: '{{ trigger.id == ''evaluate_status'' }}'
    then:
    - if: '{{ is_state(''input_boolean.cellular_message_test_pending'', ''on'') }}'
      then:
      - action: notify.signal_homeassistant
        data:
          message: Modem Healtcheck Failed, Power Cycling
      - action: esphome.cellular_modem_power_toggle
- alias: Cellular Modem Power Toggle
  id: cellular_modem_power_toggle
  mode: single
  initial_state: true
  trigger:
  - platform: webhook
    webhook_id: SECRET
    local_only: false
  - platform: state
    entity_id: sensor.cellular_modem_power
    from: 'on'
    to: 'off'
  action:
  - action: esphome.cellular_modem_power_toggle
- alias: Power off NAS after backup
  id: nas_poweroff_post_backup
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.backups_complete
    to: 'on'
  condition:
    condition: time
    after: 03:00:00
    before: 05:00:00
    weekday:
    - wed
  action:
    action: homeassistant.turn_off
    entity_id:
    - switch.nas
    - binary_sensor.backups_complete
- alias: React to Spotify Starting to Play
  id: spotify_reaction
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.spotify
    attribute: source
    to: Office
  - platform: state
    entity_id: media_player.spotify
    attribute: source
    to: Everywhere
  - platform: state
    entity_id: media_player.spotify
    to: playing
  - platform: state
    entity_id: media_player.spotify
    attribute: source
    to: Kitchen
  condition: '{{ states(''media_player.spotify'') == ''playing''}}'
  action:
  - if: '{{ states(''media_player.spotify'') == ''playing'' and states(''switch.andrew_office_speakers'')
      == ''off'' and state_attr(''media_player.spotify'', ''source'') in [''Everywhere'',
      ''Office''] }}'
    then:
    - action: homeassistant.turn_on
      entity_id: switch.andrew_office_speakers
- alias: Turn on speakers and tv when XBOX powers on
  id: speakers_with_xbox
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.xbox_power
    to: 'on'
  condition: '{{ states(''input_boolean.goodnight'') == ''off'' and states(''group.trackers'')
    == ''home'' }}'
  action:
    action: homeassistant.turn_on
    entity_id:
    - switch.living_room_speakers
    - switch.tv
- alias: Turn off speakers when tv OR xbox powers off
  id: tv_off_with_xbox_off
  initial_state: true
  trigger:
  - platform: state
    entity_id: switch.tv
    to: 'off'
  - platform: state
    entity_id: binary_sensor.xbox_power
    to: 'off'
  condition: '{{ states(''input_boolean.goodnight'') == ''off'' and states(''group.trackers'')
    == ''home'' }}'
  action:
    action: homeassistant.turn_off
    entity_id:
    - switch.living_room_speakers
    - switch.tv
- id: desk_lamp_macbook_active
  alias: Desk Lamp on when MacBook Active
  trigger:
  - platform: state
    entity_id: binary_sensor.weasel_active
    to: 'on'
  condition:
  - condition: template
    value_template: '{{ states(''person.andrew'') == ''home'' }}'
  action:
  - if:
    - condition: template
      value_template: '{{ states(''sun.sun'') == ''below_horizon'' or (states(''cover.office_blind_left'')
        == ''closed'' and states(''cover.office_blind_right'') == ''closed'') }}'
    then:
    - action: homeassistant.turn_on
      entity_id: light.andrew_desk_lamp
  - action: homeassistant.turn_on
    entity_id:
    - switch.andrew_monitor
    - media_player.kitchen_photo_frame
    - media_player.office_photo_frame
  - condition: time
    after: 08:00:00
    before: '21:00:00'
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.goodnight
  initial_state: true
- alias: Desk Lamp and Monitor off
  id: desk_lamp_and_monitor_off
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.weasel_active
    to: 'off'
    for: 00:30:00
  - platform: state
    entity_id: binary_sensor.andrew_phone_car_connected
    to: 'on'
  action:
  - action: homeassistant.turn_off
    entity_id: light.andrew_desk_lamp
  - action: homeassistant.turn_off
    entity_id: switch.andrew_monitor
- alias: Nexus off After Monitor
  id: nexus_7_off_after_monitor
  initial_state: true
  trigger:
    platform: state
    entity_id: switch.andrew_monitor
    to: 'off'
    for: 00:00:30
  action:
  - action: homeassistant.turn_off
    entity_id: switch.nexus_7_screen
- alias: Master Closet Light with Motion
  id: closet_motion_light
  trigger:
  - platform: state
    entity_id: binary_sensor.master_closet_motion_sensor
    to: 'on'
  mode: restart
  action:
  - action: homeassistant.turn_on
    entity_id: switch.master_closet_light
  - delay: 00:05:00
  - action: homeassistant.turn_off
    entity_id: switch.master_closet_light
- alias: Sensor Battery Alerts
  id: sensor_battery_alert
  trigger:
  - platform: state
    id: binary
    from: 'off'
    to: 'on'
    entity_id:
    - binary_sensor.flume_sensor_home_battery
    - binary_sensor.compost_battery
    - binary_sensor.433_weather_battery
    - binary_sensor.deep_freeze_battery
  - platform: numeric_state
    id: value
    entity_id:
    - sensor.1_battery_level
    - sensor.2_battery_level
    - sensor.3_battery_level
    - sensor.back_bedroom_remote_battery_level
    - sensor.guest_bedroom_remote_battery_level
    - sensor.front_door_battery
    - sensor.back_door_battery
    - sensor.garage_exterior_door_battery_level
    - sensor.back_bathroom_toilet_water_detector_battery_level
    - sensor.guest_bathroom_toilet_water_detector_battery_level
    - sensor.master_bathroom_water_detector_battery_level
    - sensor.kitchen_sink_water_detector_battery_level
    - sensor.dishwasher_water_detector_battery_level
    - sensor.motion_1_battery_level
    - sensor.living_room_motion_battery_level
    - sensor.hallway_motion_battery
    - sensor.master_closet_motion_battery_level
    - sensor.office_blind_left_battery
    - sensor.office_blind_right_battery
    - sensor.guest_bedroom_blind_left_battery
    - sensor.guest_bedroom_blind_right_battery
    - sensor.master_bedroom_blind_left_battery
    - sensor.master_bedroom_blind_right_battery
    - sensor.dining_room_blind_left_battery
    - sensor.dining_room_blind_center_battery
    - sensor.dining_room_blind_right_battery
    - sensor.netatmo_home_attic_battery_percent
    - sensor.meater_battery_level
    below: 10
  action:
  - action: script.notify_wrapper
    data:
      message: "{% if trigger.id == \"value\" %}\n  {{ trigger.to_state.name }} battery
        level at {{ trigger.to_state.state }}%\n{% elif trigger.id == \"binary\" %}\n
        \ {{ trigger.to_state.name }} battery level low!\n{% endif %}\n"
- alias: Update CloudFlare Firewall Rule
  id: update_cloudflare_firewall_rule
  trigger:
  - platform: state
    entity_id: sensor.myip
  condition: '{{ trigger.to_state.state not in ["unknown","unavailable"] }}'
  action:
  - action: shell_command.update_cloudflare_firewall
    data:
      old: '{{ trigger.from_state.state }}'
      new: '{{ trigger.to_state.state }}'
- alias: Disarm When Opening Garage
  id: disarm_when_garage_opened
  trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      action: open_cover
      service_data:
        entity_id: cover.garage_door
  action:
  - action: input_boolean.turn_off
    entity_id: input_boolean.security_status
- alias: Commit Frigate Config
  id: commit_frigate_config
  trigger:
    platform: event
    event_type: folder_watcher
    event_data:
      event_type: modified
      file: config.yml
  action:
  - action: shell_command.commit_frigate_changes
- alias: Compost Turn Reset
  id: compost_turn_reset
  trigger:
  - platform: state
    entity_id: input_boolean.compost_turn
    to: 'on'
  action:
  - delay: 00:01:00
  - action: homeassistant.turn_off
    entity_id: input_boolean.compost_turn
- alias: Internet Reachability GSM Alert
  id: internet_gsm_alert
  trigger:
  - platform: state
    entity_id: binary_sensor.internet_reachability
    from: 'on'
    to: 'off'
    id: binary
  - platform: state
    entity_id: binary_sensor.internet_reachability
    from: 'off'
    to: 'on'
    id: binary
  - platform: state
    id: gateway
    entity_id: sensor.pfsense_gateway_wan_dhcp
    from: 'True'
    to: 'False'
  - platform: state
    id: gateway
    entity_id: sensor.pfsense_gateway_wan_dhcp
    from: 'False'
    to: 'True'
  action:
  - if: '{{ trigger.id == ''binary'' }}'
    then:
    - action: notify.cellular_message
      data:
        message: '{% if trigger.from_state.state == "on" %} Home internet is down
          {% else %} Home internet has recovered {% endif %}

          '
        data:
          priority: '{% if now().hour > 9 and now().hour < 22 and is_state(''person.andrew'',
            ''home'') %}1{% else %}0{% endif %}'
  - if: '{{ trigger.id == ''gateway'' }}'
    then:
    - action: notify.cellular_message
      data:
        message: '{% if trigger.from_state.state == "True" %} PFSense gateway down
          {% else %} PFSense gateway has recovered {% endif %}

          '
        data:
          priority: '{% if now().hour > 9 and now().hour < 22  and is_state(''person.andrew'',
            ''home'') %}1{% else %}0{% endif %}'
- id: webhook_debugger
  alias: Webhook Debugger
  trigger:
  - platform: webhook
    webhook_id: hihihi
    local_only: false
  action:
  - action: persistent_notification.create
    data:
      message: "{% if 'data' in trigger %}\n  Data: {{ dict(trigger.data)|tojson }}\n{%
        elif 'json' in trigger %}\n  JSON: {{ dict(trigger.json)|tojson }}\n{% else
        %} {% endif %} {% if 'query' in trigger and trigger.query|length > 0 %}\n
        \ Query: {{ dict(trigger.query)|tojson }}\n{% endif %}"
- id: bluebubbles_to_sms
  alias: BlueBubbles to SMS
  trigger:
  - platform: webhook
    webhook_id: hihihi
    local_only: false
  action:
  - if: '{{ trigger.json.data.isFromMe == false and trigger.json.data.handle.address
      != ''+PHONE_NUMBER'' }}'
    then:
    - action: notify.donotreply_SECRET
      data:
        target: 5128798125@msg.fi.google.com
        message: '{{ trigger.json.data.handle.address }}: {{ trigger.json.data.text
          }}'
        title: BlueBubbles FWD
- alias: Watchtower Updates
  id: watchertower_run_update
  trigger:
  - platform: time
    at: '15:00:00'
  - platform: time
    at: '20:00:00'
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - sun
    - '{{ states(''person.andrew'') == ''home''}}'
  action:
  - action: homeassistant.turn_on
    entity_id: switch.docker_watchtower
- alias: Update Utility Costs
  id: update_utility_costs
  mode: single
  trigger:
  - platform: time_pattern
    hours: /12
  - platform: time
    at: '23:59:30'
  action:
  - action: python_script.compute_utility_costs
    data:
      meter_entity: sensor.electricity_usage
  - action: python_script.compute_utility_costs
    data:
      meter_entity: sensor.water_usage
- id: reset_utility_meters
  alias: Reset Utility Meters
  trigger:
  - platform: time
    at: 00:00:00
    enabled: true
  condition:
  - condition: template
    value_template: '{{ now().day == 1 }}'
  action:
  - action: python_script.utility_meter_reset
    data:
      meter_entity: sensor.water_usage
      cycle_reset_entity_id: sensor.utilities_cycle_end
  - action: python_script.utility_meter_reset
    data:
      meter_entity: sensor.electricity_usage
      cycle_reset_entity_id: sensor.utilities_cycle_end
- alias: Update USPS Mail Camera Path on Hass Restart
  id: usps_mail_path_update
  trigger:
  - platform: state
    entity_id: sensor.mail_updated
  - platform: homeassistant
    event: start
  action:
  - action: local_file.update_file_path
    data_template:
      entity_id: camera.mail_usps
      file_path: '{{ states(''sensor.mail_image_system_path'') }}'
- alias: Fingerprint Door Unlock
  id: fingerprint_door_unlock
  trigger:
    platform: state
    entity_id: sensor.fingerprint_state
    to: Authorized finger
  condition: '{{ states(''sensor.fingerprint_last_finger_id'') in [''1'',''2''] }}'
  action:
  - action: lock.unlock
    entity_id: lock.back_door
  - action: script.notify_wrapper
    data:
      message: Front door unlocked by {% if states('sensor.fingerprint_last_finger_id')
        == '1' %}Andrew right index{% elif states('sensor.fingerprint_last_finger_id')
        == '2' %}Andrew left index{% else %}Unknown{% endif %}!
- alias: Signal Webhook Message BVST
  id: signal_webhook_message_bvst
  mode: queued
  initial_state: true
  trigger:
  - platform: webhook
    webhook_id: SECRET
    id: contact
    local_only: false
  - platform: webhook
    webhook_id: SECRET
    id: insurance
    local_only: false
  action:
  - if: '{{ trigger.id == ''contact'' }}'
    then:
    - action: notify.signal_bvst
      data:
        message: '{{ trigger.json[''message''] }}'
  - if: '{{ trigger.id == ''insurance'' }}'
    then:
    - action: notify.signal_bvst_ins
      data:
        message: '{{ trigger.json[''message''] }}'
- alias: Restart AppDaemon
  id: restart_appdaemon
  trigger:
    platform: time
    at: 01:30:00
  action:
  - action: switch.turn_off
    entity_id: switch.docker_appdaemon
  - delay: 00:00:30
  - action: switch.turn_on
    entity_id: switch.docker_appdaemon
- alias: Restart cellular_message_relay_sim7080g
  id: restart_cellular_message_relay_sim7080g
  trigger:
    platform: time
    at: 01:35:00
  action:
  - action: switch.turn_off
    entity_id: switch.docker_cellular_message_relay_sim7080g
  - delay: 00:00:45
  - action: switch.turn_on
    entity_id: switch.docker_cellular_message_relay_sim7080g
- alias: Deep Freeze Temperature
  id: deep_freeze_temperature
  initial_state: true
  trigger:
    platform: numeric_state
    entity_id:
    - sensor.deep_freeze_temperature
    above: 25
    for:
      minutes: 10
  action:
  - action: script.notify_wrapper
    data:
      message: The deep freeze has been above 25°F for 10 minutes and is currently
        {{ trigger.to_state.state }}°F
      data:
        priority: 2
- alias: Garage Fan
  id: garage_fan
  initial_state: true
  trigger:
    platform: state
    entity_id: cover.garage_door
    to:
    - open
    - closed
  action:
  - action: "{% if trigger.from_state.state == \"closed\" and trigger.to_state.state
      == \"open\" %}\n  switch.turn_on\n{% elif trigger.from_state.state == \"open\"
      and trigger.to_state.state == \"closed\" %}\n  switch.turn_off\n{% endif %}\n"
    entity_id: switch.garage_fan
- alias: Door Chime
  id: door_chime
  initial_state: true
  trigger:
  - platform: state
    entity_id:
    - cover.garage_door
    from: closed
    to: open
  condition: '{{ states(''group.trackers'') == ''home''}}'
  action:
  - action: notify.alexa_media_kitchen
    data:
      data:
        type: tts
        method: speak
      message: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/bell_02"/>
- alias: Startup Notificiation
  id: startup_notification
  initial_state: true
  trigger:
  - platform: homeassistant
    event: start
  action:
  - action: notify.signal_self
    data:
      message: 'Home Assistant v{{ states(''sensor.ha_version'')}} has started!

        '
- id: coffee_maker_alarm_clock
  alias: Coffee Maker on With Alarm Clock
  trigger:
  - platform: state
    entity_id: sensor.andrew_phone_last_notification
    attribute: channel_id
    to: Firing
    id: alarm
    alias: Phone Alarm
  - platform: event
    id: respond
    event_type: mobile_app_notification_action
    event_data:
      action: confirm_coffee_on
    alias: Mobile Notification Response
  - alias: Mobile Notification Response
    platform: event
    id: make
    event_type: mobile_app_notification_action
    event_data:
      action: confirm_make_latte
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ states(''binary_sensor.workday_sensor'') == ''on'' }}'
      alias: Workday?
      enabled: false
    - condition: time
      after: 05:30:00
      before: '10:00:00'
      enabled: true
      alias: Morning?
    - condition: template
      value_template: '{{ states(''person.andrew'') == ''home'' }}'
      alias: Andrew Home?
  action:
  - if:
    - condition: trigger
      id:
      - alarm
    then:
    - wait_template: '{{ is_state(''sensor.andrew_phone_charger_type'', ''none'')
        }}'
      timeout: 00:05:00
    - action: notify.mobile_app_andrew_phone
      data:
        message: Turn on Coffee Maker?
        data:
          persistent: true
          tag: persistent
          actions:
          - action: confirm_coffee_on
            title: 'Yes'
          - action: ignore_coffee_on
            title: 'No'
    alias: Send Notification
  - alias: Turn on Coffee Maker
    if:
    - condition: trigger
      id:
      - respond
    then:
    - action: switch.turn_on
      data: {}
      target:
        entity_id: switch.coffee_maker_power_with_cleaning
      alias: Turn on Coffee Maker
    - wait_for_trigger:
      - platform: state
        entity_id:
        - sensor.coffee_maker_status
        to: Idle
        for:
          hours: 0
          minutes: 1
          seconds: 0
      timeout:
        hours: 0
        minutes: 2
        seconds: 0
        milliseconds: 0
      alias: Wait For Idle Status
    - action: notify.mobile_app_andrew_phone
      data:
        message: Make Double Latte?
        data:
          persistent: true
          tag: persistent
          actions:
          - action: confirm_make_latte
            title: 'Yes'
          - action: ignore_make_latte
            title: 'No'
      alias: Send Make Late Question
  - alias: Make Double Latte
    if:
    - condition: trigger
      id:
      - make
    then:
    - action: script.andrew_double_latte
      data: {}
  initial_state: true
- id: coffee_maker_off
  alias: Coffee Maker Off
  trigger:
  - platform: time
    at: '10:00:00'
  condition:
  - condition: template
    value_template: '{{ states(''switch.coffee_maker'') == ''on'' }}'
  action:
  - action: switch.turn_off
    data: {}
    target:
      entity_id: switch.coffee_maker_power_without_cleaning
  - action: notify.signal_homeassistant
    data:
      message: 'Turned coffee maker off!

        '
  initial_state: true
- alias: Turn off AC Fan
  id: turn_off_ac_fan
  trigger:
  - platform: state
    entity_id: sensor.thermostat_state
    to: Idle Fan
    for:
      minutes: 30
  action:
  - action: script.notify_wrapper
    data:
      message: AC fan on idle for 30 minutes, setting back to auto
  - action: climate.set_fan_mode
    entity_id: climate.thermostat
    data:
      fan_mode: auto
- alias: Plant Light Corner Brightness
  id: plant_corner_brightness
  trigger:
  - platform: state
    entity_id: light.plant_light_corner
    to: 'on'
    for: 00:00:10
  action:
  - repeat:
      count: 3
      sequence:
      - action: light.turn_on
        entity_id: light.plant_light_corner
        data:
          brightness: 255
      - delay: 00:00:05
- alias: Rain Notifications
  id: rain_notifications
  mode: restart
  trigger:
  - platform: state
    entity_id: sensor.neighbor_5in1_rain_last_1_hour
    from:
    - unknown
    - unavailable
    - '0.0'
    - '0.00'
    - '0'
  action:
  - if:
    - '{{ float(trigger.to_state.state, default=-1) > 0.00 }}'
    then:
    - action: notify.signal_homeassistant
      data:
        message: 'Rain started!

          '
- alias: Frozen Refrigerator
  id: frozen_refrigerator
  trigger:
  - platform: numeric_state
    entity_id: sensor.refrigerator_power
    above: 50
    for: 03:00:00
  action:
  - action: notify.signal_homeassistant
    data:
      message: 'Refrigerator power consumption >50W for three hours. Is it frozen
        up?

        '
- alias: House secure at night reminder
  id: house_secure_night_reminder
  trigger:
  - platform: event
    event_type: script_started
    event_data:
      entity_id: script.master_bedroom_bedtime
  variables:
    doors_locked: '{{ is_state(''lock.front_door'',''locked'') and is_state(''lock.back_door'',''locked'')
      and is_state(''lock.garage_exterior_door'',''locked'') }}'
  condition: '{{ is_state(''cover.garage_door'',''open'') or not doors_locked }}'
  action:
  - action: notify.alexa_media_master
    data:
      data:
        type: tts
      message: '{% if is_state(''cover.garage_door'',''open'') and doors_locked %}
        "The garage door is still open. You can say ''Alexa, close the garage door.''"
        {% elif is_state(''cover.garage_door'',''open'') and not doors_locked %} "The
        garage door is still open and some doors are unlocked. You can say ''Alexa,
        close the garage door'' and then ''Alexa, lock the doors.''" {% elif is_state(''cover.garage_door'',''closed'')
        and not doors_locked %} "Some doors are unlocked. You can say ''Alexa, lock
        the doors.''" {% endif %}

        '
- alias: Doors still unlocked when no one home
  id: doors_unlocked_noone_home
  trigger:
  - platform: state
    id: alert
    entity_id: group.trackers
    to: not_home
  - platform: event
    id: respond
    event_type: mobile_app_notification_action
    event_data:
      action: confirm_lock_doors
  condition:
  - condition: state
    entity_id: lock.all_doors
    state: unlocked
  action:
  - if: '{{ trigger.id == ''alert'' }}'
    then:
    - action: notify.mobile_app_andrew_phone
      data:
        message: No one home, lock doors?
        data:
          persistent: true
          tag: persistent
          actions:
          - action: confirm_lock_doors
            title: Confirm
          - action: ignore_lock_doors
            title: Ignore
  - if: '{{ trigger.id == ''respond'' }}'
    then:
    - action: lock.lock
      entity_id: lock.all_doors
- id: '1718318289284'
  alias: PFsense Backup
  description: ''
  trigger:
  - platform: time_pattern
    hours: /1
  condition: []
  action:
  - action: shell_command.commit_pfsense_changes
    metadata: {}
    data: {}
  mode: single
- id: '1720406432197'
  alias: Back Bedroom Remote
  description: ''
  use_blueprint:
    path: rwalker777/Zen37-ZwaveJS-blueprint.yaml
    input:
      zen37lr:
      - 68971831fd0b085e4182822bb5ff1ede
      button_1_1_tap:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.back_bedroom_ceiling_fan
      button_2_1_tap:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.back_bedroom_ceiling_fan
      button_3_1_tap:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.back_bedroom_nightstand_lamp
      button_4_1_tap:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.back_bedroom_dresser_lamp
- id: '1720408089416'
  alias: Guest Bedroom Remote
  description: ''
  use_blueprint:
    path: rwalker777/Zen37-ZwaveJS-blueprint.yaml
    input:
      zen37lr:
      - 273e5786af733bd9027661670d6e232d
      button_1_1_tap:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.guest_bedroom_ceiling_fan
      button_2_1_tap:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.guest_bedroom_ceiling_fan
      button_3_1_tap:
      - action: light.toggle
        target:
          entity_id: light.guest_bedroom_nightstand_lamp
        data: {}
      button_4_1_tap:
      - action: cover.stop_cover
        target:
          entity_id:
          - cover.guest_bedroom_blind_left
          - cover.guest_bedroom_blind_right
        data: {}
      - action: input_boolean.toggle
        entity_id: input_boolean.guest_bedroom_blinds_mode
      - action: cover.{% if is_state('input_boolean.guest_bedroom_blinds_mode', 'on')
          %}close{% else %}open{% endif %}_cover
        target:
          entity_id:
          - cover.guest_bedroom_blind_left
          - cover.guest_bedroom_blind_right
      automation_mode: restart
- id: '1720483482802'
  alias: Master Bedroom Remote
  description: ''
  use_blueprint:
    path: rwalker777/Zen37-ZwaveJS-blueprint.yaml
    input:
      zen37lr:
      - 02c3c1689c22bf4221da0a498094ef45
      button_1_1_tap:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.master_bedroom_ceiling_fan
      button_2_1_tap:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.master_bedroom_ceiling_fan
      button_3_1_tap:
      - action: light.toggle
        data: {}
        target:
          entity_id: light.master_bedroom_lamps
      button_4_1_tap:
      - action: cover.stop_cover
        target:
          entity_id:
          - cover.master_bedroom_blind_left
          - cover.master_bedroom_blind_right
        data: {}
      - action: input_boolean.toggle
        entity_id: input_boolean.guest_bedroom_blinds_mode
      - action: cover.{% if is_state('input_boolean.master_bedroom_blinds_mode', 'on')
          %}close{% else %}open{% endif %}_cover
        target:
          entity_id:
          - cover.master_bedroom_blind_left
          - cover.master_bedroom_blind_right
      automation_mode: restart
- id: '1722280146692'
  alias: Reset Master Bathroom Motion
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.433_motion_master_bathroom
    to: 'on'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  - platform: time_pattern
    hours: /1
  condition: []
  action:
  - action: setter.set
    data:
      entity_id: binary_sensor.433_motion_master_bathroom
      state: 'off'
      attributes:
        device_class: motion
        friendly_name: 433 Motion Master Bathroom
  mode: single
- id: '1722300479686'
  alias: Turn off Master Bathroom Lights
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.433_motion_master_bathroom
    to: 'off'
    for:
      hours: 0
      minutes: 30
      seconds: 0
  condition:
  - condition: template
    value_template: '{{ is_state("switch.master_bathroom_light_main", "on") or is_state("switch.master_bathroom_light_secondary",
      "on") }}'
  action:
  - action: switch.turn_off
    target:
      entity_id:
      - switch.master_bathroom_light_main
      - switch.master_bathroom_light_secondary
    data: {}
  mode: single
- id: '1723658532445'
  alias: Coffee Maker Alerts
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.coffee_maker_status
    to:
    - Error
    - Waste container warning
    - Warning
  condition: []
  action:
  - action: notify.signal_homeassistant
    data:
      message: 'Coffee maker in {{ trigger.to_state.state }} status!

        '
  mode: single
