substitutions:
  name: stock_ticker_display_main
  clk_pin: GPIO2 # Yellow
  mosi_pin: GPIO4 # Blue
  cs_pin: GPIO6 # Orange
  dc_pin: GPIO10 # Green
  busy_pin: GPIO3 # Purple
  reset_pin: GPIO5 # White

esphome:
  name: ${name}
  on_boot:
    priority: 250.0
    then:
      - component.update: eink_display

esp32:
  board: lolin_c3_mini
  variant: esp32c3
  framework:
    type: arduino

wifi:
  # Define some testing networks and ensure vaiable updated with WiFi status
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid_two
    password: !secret wifi_password_two
  ap:
    ssid: "Stock Fallback AP"
  on_connect:
    then:
      - lambda: |-
          id(wifi_status) = 1;
          id(eink_display).set_full_update_every(1);
      - delay: 5s
      - component.update: eink_display
  on_disconnect:
    then:
      - lambda: |-
          id(wifi_status) = 0 ;
          id(eink_display).set_full_update_every(1);
      - component.update: eink_display

# Redirect to WiFi credential input if in AP
captive_portal:

time:
  - platform: sntp
    timezone: "America/New_York"
    id: time_et

# Allow WiFi OTA firmware update
ota:
  - platform: esphome
    password: esphome_recovery
  - platform: web_server  # Add this for web-based OTA uploads

logger:
  level: DEBUG

# Enable web server for config change and log view
web_server:
  local: true

# Global variables used in scripts and automations
globals:
  - id: wifi_status
    type: int
    restore_value: no
    initial_value: "0"
  - id: first_update_done
    type: bool
    restore_value: no
    initial_value: "false"

font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 900
    id: medium
    size: 20
  - file:
      type: gfonts
      family: Montserrat
      weight: 900
    id: small
    size: 12
  - file:
      type: gfonts
      family: Montserrat
      weight: 900
    id: large
    size: 50

# Define SPI ports
spi:
  clk_pin: ${clk_pin} # Yellow
  mosi_pin: ${mosi_pin} # DIN # Blue

# Details for HTTP request component
http_request:
  useragent: esphome/device
  verify_ssl: false
  timeout: 10s

# Selectable fetch interval (use web frontend to modify)
# Fetch data and update display if fetched values change
number:
  - platform: template
    name: "Refresh Interval (Seconds)"
    id: update_interval
    optimistic: true
    min_value: 30
    max_value: 3600
    step: 10
    initial_value: 30
    restore_value: true
    mode: box

# Updatable web endpoint for pricing, ticker lookup (use web front end)
text:
  - platform: template
    name: "Price JSON Endpoint"
    id: price_url
    optimistic: true
    restore_value: True
    initial_value: !secret epaper_price
    min_length: 0
    max_length: 200
    mode: text

# Text sensors to hold values for display or automation
text_sensor:
  - platform: template
    name: "Last Update"
    id: timestamp
  - platform: template
    name: "Market Period"
    id: period
  - platform: template
    name: "Price"
    id: price
  - platform: template
    name: "Symbol"
    id: symbol  
  - platform: template
    name: "Change PCT"
    id: change_pct  
  - platform: template
    name: "WiFi Mode"
    id: wifi_mode
    lambda: |-   
      #ifdef USE_ESP32
      static std::string last_mode;
      wifi_mode_t mode;
      esp_wifi_get_mode(&mode);
      std::string new_mode = (mode == WIFI_MODE_AP || mode == WIFI_MODE_APSTA) ? "AP" : "STA";
      if (new_mode != last_mode) {
        last_mode = new_mode;
        return new_mode;
      } else {
        return {};
      }
      #else
      return {"N/A"};
      #endif
    update_interval: 5s

switch:
  - platform: template
    name: "Limit Updates to Market Hours"
    id: limit_hours_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

script:
  - id: partial_update
    then:
      - lambda: 'id(eink_display).set_full_update_every(50);'
      - component.update: eink_display
      - delay: 300ms
      - component.update: eink_display
      - delay: 300ms
      - component.update: eink_display

  - id: fetch_and_update
    then:
      - http_request.get:
          url: !lambda 'return id(price_url).state.c_str();'
          capture_response: true
          on_response:
            then:
              - if:
                  condition:
                    lambda: return response->status_code == 200;
                  then:
                    - lambda: |-
                        if (body.length() <= 0) {
                          ESP_LOGW("main", "HTTP response body is empty or unknown length — skipping parse.");
                          id(timestamp).publish_state("N/A");
                          id(symbol).publish_state("N/A");
                          id(price).publish_state("?.??");
                          id(change_pct).publish_state("?.??");
                          return;
                        }

                        ESP_LOGD("main", "Raw response: %s", body.c_str());

                        bool changed = false;
                        bool valid = true;

                        bool parsed = json::parse_json(body, [&](JsonObject root) -> bool {
                          auto update_if_changed = [&](const char* key, std::string &current, TextSensor *sensor) {
                            if (root.containsKey(key)) {
                              current = root[key].as<std::string>();
                              sensor->publish_state(current);
                              changed = true;

                            } else {
                              ESP_LOGW("main", "Missing key: %s", key);
                              current = "N/A";
                              sensor->publish_state(current);
                              // DO NOT update last = current; allow recovery
                              changed = true;
                              valid = false;
                            }
                          };

                          std::string curr_sym, curr_price, curr_pct, curr_time, curr_period;

                          update_if_changed("symbol", curr_sym, id(symbol));
                          update_if_changed("latestPrice", curr_price, id(price));
                          update_if_changed("changePercentage", curr_pct, id(change_pct));
                          update_if_changed("timestamp", curr_time, id(timestamp));
                          update_if_changed("period", curr_period, id(period));

                          return valid;
                        });

                        if (!parsed) {
                          ESP_LOGE("main", "Failed to parse JSON — possible Cloudflare block or malformed response.");
                          return;
                        }

                        if (changed) {
                          // Full refresh on first update
                          if (id(first_update_done) != true){
                            ESP_LOGD("main", "First update — fully refreshing display");
                            id(eink_display).update();
                          }
                          // Partial refresh on all subsequent
                          else {
                            ESP_LOGD("main", "Data changed — partially refreshing display");
                            // Call Partial Update Script
                            id(partial_update).execute();
                          }
                        } else {
                          ESP_LOGD("main", "No data changes — skipping display update");
                        }
                  else:
                    - logger.log:
                        format: "Error: Response status: %d, body: %s"
                        args: [ 'response->status_code', 'body.c_str()' ]

interval:
  # Initial Update at Boot and Connected
  - interval: 5s
    then:
      - if:
          condition:
            and:
              - wifi.connected:
              - lambda: "return !id(first_update_done);"
          then:
            - lambda: |-
                ESP_LOGD("Display", "Triggered initial display update...");
            - script.execute: fetch_and_update
            - lambda: "id(first_update_done) = true;"

  # Subsequent Updates - Selectable interval for fetch - only update during market hours
  # 5s interval so we can increase a counter to check whether we need to refresh the display
  # Must update the counter at bottom of interval lambda to increment by this interval as well
  - interval: 10s
    then:
      - if:
          condition:
            lambda: |-
              // Allow us to override market hours update block
              if (!id(limit_hours_switch).state) {
                ESP_LOGD("main", "Hour limit is disabled, proceeding.");
                return true;
              }

              auto now = id(time_et).now();
              if (!now.is_valid()) return false;

              // Normalize day of week: 0 = Sunday, ..., 6 = Saturday
              // Force DOW into 0–6 range and fix known offset
              int dow = (now.day_of_week + 6) % 7;
              const char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

              // Now dow is: 0=Sun, 1=Mon, ..., 5=Fri, 6=Sat
              if (dow < 1 || dow > 5) {
                ESP_LOGD("main", "Weekend — skipping. Now: %04d-%02d-%02d %02d:%02d:%02d — %s (dow=%d)",
                now.year, now.month, now.day_of_month,
                now.hour, now.minute, now.second,
                days[dow], dow);
                return false;
              }

              // Allow from 8:00 AM (480) to 8:05 PM (1205) for pre and post market on weekdays
              int minutes_since_midnight = now.hour * 60 + now.minute;
              if (minutes_since_midnight >= 480 && minutes_since_midnight <= 1205) {
                ESP_LOGD("main", "Weekday — evaluating changes. Now: %04d-%02d-%02d %02d:%02d:%02d — %s (dow=%d)",
                  now.year, now.month, now.day_of_month,
                  now.hour, now.minute, now.second,
                  days[dow], dow);
                return true;
              }

              // Didn't return, so weekday outside of hours
              ESP_LOGD("main", "Weekday outside of hours - skipping. Now: %04d-%02d-%02d %02d:%02d:%02d — %s (dow=%d)",
                now.year, now.month, now.day_of_month,
                now.hour, now.minute, now.second,
                days[dow], dow);
              return false;
          then:
            - lambda: |-
                static int counter = 0;
                counter+=10;
                counter = std::min(counter, 100000); 
                if (counter >= id(update_interval).state && id(wifi_status) == 1) {
                  counter = 0;
                  ESP_LOGD("Display", "Triggered update on interval...");
                  id(fetch_and_update).execute();
                }

  # Update wifi status so we can display AP info or connection attempt
  - interval: 10s
    then:
      - if:
          condition:
            - wifi.connected:
          then:
            # - lambda: |-
            #     ESP_LOGD("main", "Wifi Status: %d Wifi Mode: %s",
            #       id(wifi_status),
            #       id(wifi_mode).state.c_str());  
          else:
            - delay: 5s
            - lambda: |-
                ESP_LOGD("main", "Wifi Status: %d Wifi Mode: %s",
                  id(wifi_status),
                  id(wifi_mode).state.c_str());
            - component.update: eink_display

display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: ${cs_pin} #aka ss #Orange
    dc_pin: ${dc_pin} # Green
    busy_pin: ${busy_pin} # Purple
    reset_pin: ${reset_pin} # White
    model: 2.13in-ttgo-b74
    # Default/at boot do full display update everytime, this is modified elsewhere
    full_update_every: 1
    update_interval: never # Update from interval or automation only
    rotation: 270°
    lambda: |-
      // Trying to connect to WiFi
      if(id(wifi_status) == 0 and id(wifi_mode).state == "STA" ){
        it.printf(125, 50, id(medium), TextAlign::CENTER, "WiFi connecting");      
        it.printf(125, 90, id(medium), TextAlign::CENTER, "60s timeout...");      
      }

      // Can't connect to WiFi, in AP mode
      if(id(wifi_status) == 0 and id(wifi_mode).state == "AP" ){
        it.printf(125, 10, id(medium), TextAlign::CENTER, "Configure WiFi");      
        it.printf(125, 35, id(medium), TextAlign::CENTER, "by connecting to");      
        it.printf(125, 65, id(medium), TextAlign::CENTER, "'Stock Fallback AP'");    
        it.printf(125, 95, id(small), TextAlign::CENTER, "You may need to browse to:");      
        it.printf(125, 110, id(small), TextAlign::CENTER, "http://192.168.4.1 after connecting");     
      }
 
      // Normal active WiFi connection
      if(id(wifi_status) == 1 and id(wifi_mode).state == "STA" ){
        it.printf(125, 50, id(large), TextAlign::CENTER, "$%s", id(price).state.c_str());
        // Show pre-market / post-market tag
        if (id(period).state == "pre-market" || id(period).state == "after-hours") {
          it.printf(125, 87, id(small), TextAlign::CENTER, "%s", id(period).state.c_str());
        }
        it.printf(125, 110, id(medium), TextAlign::CENTER, "%s %s%%", id(symbol).state.c_str(), id(change_pct).state.c_str());
      }