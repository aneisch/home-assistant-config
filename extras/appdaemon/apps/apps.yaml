# AC Automation:
#   module: ac_automation
#   class: AutoAdjust
#   constrain_input_boolean: 
#     - input_boolean.ac_automation
#   thermostats: climate.thermostat
#   device_tracker: group.trackers
#   morning_adjust_weekday: "09:00:00"
#   morning_adjust_weekend: "11:00:00"
#   night_adjust_weekday: "01:00:00"
#   night_adjust_weekend: "01:00:00"
#   midnight_adjust: "04:00:00"
#   # Below depends on the manual setting of heat or cool on the thermostat
#   cool_morning: "78"
#   cool_night: "72"
#   cool_midnight: "75"
#   cool_unoccupied: "80"
#   heat_morning: "66"
#   heat_night: "64"
#   heat_midnight: "62"
#   heat_unoccupied: "55"

AC Automation Solar:
  module: ac_automation_solar
  class: AutoAdjust
  constrain_input_boolean: input_boolean.ac_automation
  thermostats: climate.thermostat
  device_tracker: group.trackers
  morning_adjust_weekday: "08:30:00"
  morning_adjust_weekend: "09:30:00"
  night_adjust_weekday: "01:00:00"
  night_adjust_weekend: "01:00:00"
  midnight_adjust: "04:00:00"
  cool_morning: "78"
  cool_night: "74"
  cool_midnight: "76" # change to this temp at midnight_adjust
  cool_unoccupied: "80"
  heat_morning: "67"
  heat_night: "64"
  heat_midnight: "62" # change to this temp at midnight_adjust
  heat_unoccupied: "55"
  grid_state_sensor: binary_sensor.solark_sol_ark_grid_connected_status
  solar_boost_threshold: 700
  battery_boost_threshold: 95       # battery SOC for boost activation
  cool_boost_offset: 8              # amount in degrees F to lower if boost mode active (vs cool_morning temp)
  cool_boost_unoccupied_offset: 4   # Amount to boost if unoccupied
  cooldown_window_start_offset: "-07:00:00"   # 7 hours before sunset
  cooldown_window_end_offset: "-01:30:00"     # 1.5 hour before sunset

Solar EV Charger:
  module: ev
  class: SolarEVCharger
  constrain_presence: anyone
  home_battery_min_soc: 60
  buffer_watts: 500

# EV Charge Control:
#   module: ev_charger_smart_control
#   class: EvChargerSmartControl
#   ev_switch: switch.emporia_charger
#   ev_device_tracker: device_tracker.tesla_location
#   solar_sensor: sensor.solark_sol_ark_solar_power
#   load_sensor: sensor.solark_sol_ark_load_power
#   #grid_export_sensor: sensor.solark_sol_ark_grid_power
#   grid_state_sensor: binary_sensor.solark_sol_ark_grid_connected_status
#   battery_soc_sensor: sensor.solark_sol_ark_battery_soc
#   override_entity: input_boolean.ev_charge_override
#   amps_override_entity: input_number.tesla_charge_rate_master
#   vehicle_battery_soc: sensor.tesla_battery_level
#   battery_threshold: 100 # Only charge when home battery > this
#   min_amps: 6
#   max_amps: 40
#   debounce_minutes: 2 # the most often we'll respond to solar changes

Kitchen Timer Sync:
  module: echo_timer_sync
  class: TimerSync
  alexa_timer: sensor.kitchen_next_timer
  timer_prefix: kitchen_alexa
  # how many timer. entities are in home assistant?
  timer_count: 5

# Timer:
#   module: timer
#   class: Timer
#   timer_entity: sensor.kitchen_next_timer
#   # what entity will hold the countdown state?
#   countdown_destination_entity: sensor.kitchen_timer_countdown
#   # Publish to MQTT (remove mqtt entry if you don't want..)
#   mqtt: True

# Set Smallgroup Boolean On:
#   module: entity_timer
#   class: Timer
#   constrain_person: anyone
#   constrain_days: thu
#   time_on: "05:00:00"
#   entities: input_boolean.is_smallgroup

Set Smallgroup Boolean Off:
  module: entity_timer
  class: Timer
  time_off: "23:59:00"
  entities: input_boolean.is_smallgroup

Back Bedroom Zigbee Remote:
  module: zigbee_remote
  class: EcoSmartZigbeeRemote
  device_ieee: cc:cc:cc:ff:fe:d9:03:f7
  button_1_toggle: light.back_bedroom_ceiling_fan
  button_2_toggle: switch.back_bedroom_ceiling_fan
  button_3_toggle: light.back_bedroom_lamps

Guest Bedroom EcoSmart Zigbee Remote:
  module: zigbee_remote
  class: EcoSmartZigbeeRemote
  device_ieee: cc:cc:cc:ff:fe:a9:e6:43
  button_1_toggle: light.guest_bedroom_ceiling_fan
  button_2_toggle: switch.guest_bedroom_ceiling_fan
  button_3_toggle: light.guest_bedroom_nightstand_lamp
  # Button 4 is handled through HA automation
  # for blinds

Garage Sengled Zigbee Remote:
  module: zigbee_remote
  class: SengledZigbeeRemote
  device_ieee: b0:ce:18:14:03:5e:06:9d
  button_1_on: switch.garage_lights
  button_2_on: switch.garage_center_leds
  button_3_off: switch.garage_center_leds
  button_4_off: switch.garage_lights
  # button_2_toggle: switch.guest_bedroom_ceiling_fan
  # button_3_toggle: light.guest_bedroom_nightstand_lamp

#Minimote Morning:
#  module: minimote
#  class: MiniMote
#  constrain_start_time: "05:00:00"
#  constrain_end_time: "08:00:00"
#  node_id: 11
#  # Panic is is an optional mode controlled by input boolean
#  # when panic mode is on, all buttons will trigger the panic_entity
#  # this should probably be a script
#  panic_mode_boolean: input_boolean.panic_mode
#  panic_entity: script.panic
#  # Toggle = short press
#  # On = long press
#  scene_1_toggle: switch.master_bedroom_ceiling_fan
#  scene_2_on: switch.master_bedroom_ceiling_fan
#  scene_3_toggle: switch.master_bedroom_ceiling_fan
#  scene_4_on: switch.master_bedroom_ceiling_fan
#  scene_5_toggle: switch.master_bedroom_ceiling_fan
#  scene_6_on: switch.master_bedroom_ceiling_fan
#  scene_7_toggle: switch.master_bedroom_ceiling_fan
#  scene_8_on: switch.master_bedroom_ceiling_fan

Minimote Non-Morning:
  module: minimote
  class: MiniMote
  constrain_start_time: "08:00:00"
  constrain_end_time: "05:00:00"
  node_id: 11
  # Panic is is an optional mode controlled by input boolean
  # when panic mode is on, all buttons will trigger the panic_entity
  # this should probably be a script
  panic_mode_boolean: input_boolean.panic_mode
  panic_entity: script.panic
  # even number = button hold
  scene_1_toggle: light.master_bedroom_ceiling_fan
  #scene_2_on: script.master_bedroom_light_full
  scene_3_toggle: switch.master_bedroom_ceiling_fan
  #scene_4_on: script.master_bedroom_light_dim
  #scene_5_toggle: switch.master_bedroom_sound_machine
  #scene_6_on: script.master_bedroom_bedtime
  scene_7_toggle: light.master_bedroom_lamps
  #scene_8_on: script.appdaemon_ac_night

Occupancy Simulator:
  module: occusim
  class: OccuSim
  enable: input_boolean.occusim
  reset_time: 02:00:00
  dump_times: "1"
  log_msg: "1"
  step_evening_name: Evening
  step_evening_start: sunset - 00:30:00
  # step_night_name: Night
  # step_night_start: "23:59:59"

  # Turn on some devices in the evening
  step_evening_on_1: light.master_bedroom_lamps
  step_evening_on_2: light.kitchen_table_light
  step_evening_on_3: light.andrew_desk_lamp
  #step_evening_on_4: light.office_ceiling_fan
  step_evening_on_7: light.guest_bedroom_nightstand_lamp
  step_evening_on_8: light.back_bedroom_nightstand_lamp
  step_evening_on_9: switch.master_bathroom_light_secondary

  # Ensure all off late
  step_dark_name: Dark
  step_dark_start: "23:30:00"
  step_dark_off_1: light.master_bedroom_lamps
  step_dark_off_2: light.dining_room_light
  step_dark_off_3: light.kitchen_table_light
  step_dark_off_5: light.andrew_desk_lamp
  step_dark_off_6: switch.master_bathroom_light_secondary
  #step_dark_off_6: light.office_ceiling_fan
  step_dark_off_7: light.guest_bedroom_nightstand_lamp
  step_dark_off_8: light.back_bedroom_nightstand_lamp

Garage Middle:
  module: follow_me
  class: Follow
  leader: switch.garage_center_leds
  follower: switch.workbench_shelf_leds

Garage Main:
  module: follow_me
  class: Follow
  leader: switch.garage_lights
  follower: switch.workbench_shelf_leds,switch.garage_center_leds

Bethany Office Hanging Lights:
  module: follow_me
  class: Follow
  leader: light.bethany_desk_lamp
  follower: light.bethany_office_hanging

Tablet Screen Follow:
  module: follow_me
  class: Follow
  constrain_person: anyone
  leader: binary_sensor.weasel_active
  follower: switch.fire_tablet_screen,media_player.office_photo_frame

Master Closet Follow:
  module: follow_me
  class: Follow
  leader: switch.master_bathroom_light_main
  follower: switch.master_closet_light

#############
# Christmas #
#############
# Christmas Lights:
#   module: entity_timer
#   class: Timer
#   entities: switch.christmas_lights # This is roofline, ground auto follows via link in esphome for device
#   time_on: sunset - 00:20:00
#   time_off: "23:00:00"

# Front Porch Tree Follow:
#   module: follow_me
#   class: Follow
#   leader: switch.christmas_lights
#   follower: switch.front_porch_christmas_tree

# Christmas Trees Follow:
#   module: follow_me
#   class: Follow
#   leader: group.christmas_trees
#   follower: switch.dining_room_christmas_tree,switch.office_christmas_tree,switch.master_bedroom_christmas_tree
#   follow_off: False # Only follow state to on

# Front House Christmas Trees Timer:
#   module: entity_timer
#   class: Timer
#   entities: switch.dining_room_christmas_tree,switch.office_christmas_tree
#   time_on: sunset - 00:20:00
#   time_off: '23:00:00'

############
# Aquarium #
############
# Circadian Follow:
#   module: follow_me
#   class: Follow
#   constrain_input_boolean:
#    - input_boolean.aquarium_automation
#   leader: light.aquarium_light
#   follower: switch.circadian_lighting_aquarium_circadian

# CO2:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean:
#    - input_boolean.aquarium_automation
#   entities: switch.aquarium_co2
#   time_on: "07:00:00"
#   time_off: "16:30:00"

# Aquarium Light On Morning:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean:
#    - input_boolean.aquarium_automation
#   entities: light.aquarium_light
#   time_on: "09:00:00"

# Aquarium Light Afternoon:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: 
#    - input_boolean.aquarium_automation
#   entities: light.aquarium_light
#   time_off: "13:00:00"
#   time_on: "14:30:00"

# Aquarium Light Off Evening:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: 
#    - input_boolean.aquarium_automation
#   entities: light.aquarium_light
#   time_off: "17:30:00"

NAS:
  module: entity_timer
  class: Timer
  entities: switch.nas
  time_on: "10:00:00"
  # There is an automation to turn this off automatically after rsync
  time_off: "10:15:00"
  constrain_days: wed

# Dyson Charger:
#   module: entity_timer
#   class: Timer
#   entities: switch.garage_dyson
#   time_on: "15:00:00"
#   time_off: "18:00:00"
#   constrain_person: anyone

AC Filter Change:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.ac_filter_change
  notification_days: 0,-7,-14 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: False # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to change the AC filter!"

Andrew Vehicle:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.andrew_vehicle_registration
  notification_days: 7,0,-7,-14 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: False # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to renew Andrew's vehicle registration!"

Bethany Vehicle:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.bethany_vehicle_registration
  notification_days: 7,0,-7,-14 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: False # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to renew Bethany's vehicle registration!"

Garage Exterior Light at Night With Door:
  module: door_open
  class: DoorLight
  constrain_start_time: sunset
  constrain_end_time: sunrise
  trigger_sensor: binary_sensor.garage_exterior_door
  toggle_entity: switch.garage_exterior_light
  # Seconds to turn entity on when triggered
  time_on: "5"

Backyard Flood Lights with Person Detection:
  module: door_open
  class: DoorLight
  constrain_end_time: sunrise - 01:00:00
  constrain_start_time: sunset
  constrain_input_boolean:
    - input_boolean.backyard_floodlight_automation
  trigger_sensor: binary_sensor.backyard_person_occupancy,binary_sensor.backyard_porch_person_occupancy,binary_sensor.bullet_person_occupancy
  toggle_entity: switch.backyard_flood_lights,switch.globe_lights
  # Seconds to turn entity on when triggered
  time_on: "120"

Doorbell Ring Light:
  module: entity_timer
  class: Timer
  entities: light.front_door_ring_light
  time_on: sunrise - 00:30:00
  time_off: sunset + 00:45:00
  # Off is handled by NodeRed with Porch Lights

Office Light at Night With Door:
  module: door_open
  class: DoorLight
  # constrain_input_boolean:
  #   - input_boolean.house_lamps_automation
  constrain_end_time: sunrise
  constrain_start_time: sunset
  trigger_sensor: binary_sensor.front_door
  toggle_entity: light.andrew_desk_lamp
  # Seconds to turn entity on when triggered
  time_on: "60"

Kitchen Light at Night With Door:
  module: door_open
  class: DoorLight
  # constrain_input_boolean: 
  #   - input_boolean.house_lamps_automation
  constrain_end_time: sunrise
  constrain_start_time: sunset
  trigger_sensor: binary_sensor.garage_interior_door,binary_sensor.back_porch_door
  toggle_entity: light.kitchen_table_leds
  # Seconds to turn entity on when triggered
  time_on: "60"

Living Room Sconces at Night With Motion:
  module: door_open
  class: DoorLight
  constrain_end_time: sunrise
  constrain_input_boolean: 
    - input_boolean.guest_mode
  trigger_sensor: binary_sensor.living_room_motion
  toggle_entity: light.living_room_sconces
  brightness: 70
  # Seconds to turn entity on when triggered
  time_on: "1"

Garage Lights with Cover, Door, Motor, Person:
  module: door_open
  class: DoorLight
  trigger_sensor: binary_sensor.garage_interior_door,binary_sensor.garage_exterior_door,binary_sensor.garage_motor_light_status,binary_sensor.garage_person_occupancy
  #toggle_entity: switch.garage_lights # too bright
  toggle_entity: switch.garage_center_leds  
  # Turn_off is handled by automation
  #time_on: '10'

Sleepy Time Lamp Automation Override:
  # Disable / Turn off some things when sleeping
  module: follow_me
  class: Follow
  leader: switch.master_bedroom_ceiling_fan
  follower: input_boolean.house_lamps_automation,automation.turn_on_speakers_and_tv_when_xbox_powers_on
  invert: True

Indoor Light Automation Sunset:
  module: entity_timer
  class: Timer
  constrain_input_boolean: 
    - input_boolean.house_lamps_automation
  constrain_person: anyone
  time_on: sunset
  #entities: light.andrew_desk_lamp,light.bethany_desk_lamp,light.living_room_lamps,light.master_bedroom_lamps,group.under_cabinet_lights,light.living_room_sconces,light.curio_cabinet #,group.christmas #,switch.ir_candles
  entities: light.living_room_lamps, group.under_cabinet_lights
  brightness: 255

Guest Light Automation Sunset:
  module: entity_timer
  class: Timer
  constrain_input_boolean: 
    - input_boolean.house_lamps_automation
    - input_boolean.guest_mode
  constrain_person: anyone
  time_on: sunset - 00:20:00
  entities: light.guest_bedroom_nightstand_lamp,light.back_bedroom_nightstand_lamp,light.back_bedroom_dresser_lamp
  brightness: 255

# Cameras Smallgroup:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: 
#     - input_boolean.is_smallgroup
#   time_off: "17:30:00"
#   time_on: "21:00:00"
#   entities: switch.driveway_detect,switch.front_door_detect

# Indoor Light Automation Sunset Smallgroup:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean:
#     - input_boolean.is_smallgroup
#   time_on: "17:30:00"
#   entities: light.andrew_desk_lamp,light.bethany_desk_lamp,light.living_room_lamps,light.master_bedroom_lamps,group.under_cabinet_lights,light.living_room_sconces,light.curio_cabinet,light.living_room_can_lights,light.dining_room_light,media_player.misc_photo_frame #,group.christmas_trees #,switch.ir_candles
#   brightness: 255

# Entryway Light Sunset Smallgroup:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: 
#     - input_boolean.is_smallgroup
#   time_on: "17:30:00"
#   time_off: "23:00:00"
#   entities: light.entryway_light
#   brightness: 255

Front Sconces Sunset:
  module: entity_timer
  class: Timer
  entities: light.front_sconces # See also NodeRed # disable at Christmas and Halloween
  time_on: sunset - 00:20:00
  time_off: sunrise - 00:30:00
  brightness: 254
  #brightness: 25 # Christmas

Front Porch Lights Sunset:
  module: entity_timer
  class: Timer
  entities: light.front_porch_lights # See also NodeRed # disable at Halloween
  #entities: light.front_porch_halloween # Halloween only LimitlessLED See also NodeRed
  time_on: sunset - 00:20:00
  time_off: sunrise - 00:30:00
  brightness: 63
  #brightness: 25 # Christmas

Plant Light:
  module: entity_timer
  class: Timer
  time_on: sunrise 
  time_off: sunset - 00:30:00
  entities: switch.kmc_multi_plug_1_1

Plant Light Corner:
  module: follow_me
  class: Follow
  leader: switch.kmc_multi_plug_1_1
  follower: light.plant_light_corner

# Sometimes the follow ^^ doesn't work. Ensure we turn off.
Plant Light Corner Double:
  module: entity_timer
  class: Timer
  time_off: sunset - 00:31:00
  entities: light.plant_light_corner

Living Room Lamp Follow:
  module: follow_me
  class: Follow
  constrain_input_boolean:
    - input_boolean.house_lamps_automation
  leader: light.master_bedroom_lamps
  follower: light.living_room_lamps

Door Notification and Occusim Security Follow:
  module: follow_me
  class: Follow
  leader: input_boolean.security_status
  follower: input_boolean.door_notify #,input_boolean.occusim # only enable manually to preserve power

TV Automation Smallgroup:
  module: entity_timer
  constrain_input_boolean:
    - input_boolean.is_smallgroup
  class: Timer
  time_off: "18:00:00"
  time_on: "22:00:00"
  entities: automation.turn_off_speakers_when_tv_or_xbox_powers_off

# Candles Follow:
#   module: follow_me
#   class: Follow
#   constrain_person: anyone
#   constrain_input_boolean: 
#    - input_boolean.house_lamps_automation
#   leader: light.master_bedroom_lamps
#   follower: switch.ir_candles

# Pumkin Patch Smallgroup:
#   module: entity_timer
#   constrain_input_boolean: 
#    - input_boolean.is_smallgroup
#   class: Timer
#   time_off: "17:45:00"
#   time_on: "22:00:00"
#   entities: switch.ir_candles

# Globe Lights Smallgroup:
#   module: entity_timer
#   constrain_input_boolean: 
#     - input_boolean.is_smallgroup
#   class: Timer
#   time_on: sunset - 00:20:00
#   time_off: "21:30:00"
#   entities: switch.globe_lights

# Turn on focus mode when desk LED on
Mac Focus Mode Follow Desk LED:
  module: follow_me
  class: Follow
  leader: light.desk_led
  follower: switch.weasel_focus

# VRS Docker:
#   module: entity_timer
#   class: Timer
#   time_on: "08:00:00"
#   time_off: sunset + 00:01:00
#   entities: switch.docker_vrs

Code Project Docker:
  module: entity_timer
  class: Timer
  time_on: "08:00:00"
  time_off: sunset + 00:30:00
  entities: switch.docker_codeproject

RTL433 Docker:
  module: entity_timer
  class: Timer
  time_off: "01:00:00"
  time_on: "01:02:00"
  entities: switch.docker_433_mqtt

BVST Docker:
  module: entity_timer
  class: Timer
  time_on: "08:00:00"
  time_off: "00:00:00"
  entities: switch.docker_bvst
