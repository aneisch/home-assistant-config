import{a as e,eT as t,dn as s,cT as a,dF as r,dm as i,l as o,dx as n,dz as d,dA as c,dy as u,r as h,_ as l,n as g,b as m,t as p,e5 as b,x as y}from"./card-cbf3bfb8.js";import{s as _,h as f,c as w,d as v}from"./media-1bf689a9.js";import{g as C}from"./get-technology-for-video-rtc-778a0c05.js";import{m as x}from"./audio-cf3a75aa.js";let V=class extends e{constructor(){super(...arguments),this.controls=!1,this._message=null,this._webrtcTask=new t(this,this._getWebRTCCardElement,(()=>[1]))}async play(){return this._getVideo()?.play()}async pause(){this._getVideo()?.pause()}async mute(){const e=this._getVideo();e&&(e.muted=!0)}async unmute(){const e=this._getVideo();e&&(e.muted=!1)}isMuted(){return this._getVideo()?.muted??!0}async seek(e){const t=this._getVideo();t&&(t.currentTime=e)}async setControls(e){const t=this._getVideo();t&&_(t,e??this.controls)}isPaused(){return this._getVideo()?.paused??!0}async getScreenshotURL(){const e=this._getVideo();return e?s(e):null}getFullscreenElement(){return this._getVideo()}connectedCallback(){super.connectedCallback(),this.requestUpdate()}disconnectedCallback(){this._message=null,super.disconnectedCallback()}willUpdate(e){["cameraConfig","cameraEndpoints"].some((t=>e.has(t)))&&(this._message=null)}_getVideoRTC(){return this.renderRoot?.querySelector("#webrtc")??null}_getVideo(){return this._getVideoRTC()?.video??null}async _getWebRTCCardElement(){return await customElements.whenDefined("webrtc-camera"),customElements.get("webrtc-camera")}_createWebRTC(){const e=this._webrtcTask.value;if(e&&this.hass&&this.cameraConfig){const t=new e,s={intersection:0,muted:!0,...this.cameraConfig.webrtc_card};return s.url||s.entity||!this.cameraEndpoints?.webrtcCard||(s.entity=this.cameraEndpoints.webrtcCard.endpoint),t.setConfig(s),t.hass=this.hass,t}return null}render(){if(this._message)return a(this._message);return r(this._webrtcTask,(()=>{let e;try{e=this._createWebRTC()}catch(e){return this._message={type:"error",message:e instanceof b?e.message:o("error.webrtc_card_reported_error")+": "+e.message,context:e.context},void v(this)}return e&&(e.id="webrtc"),y`${e}`}),{inProgressFunc:()=>i({message:o("error.webrtc_card_waiting"),cardWideConfig:this.cardWideConfig})})}updated(){this.updateComplete.then((()=>{const e=this._getVideoRTC(),t=this._getVideo();t&&(_(t,this.controls),t.onloadeddata=()=>{this.controls&&f(t,w),n(this,t,{player:this,capabilities:{supportsPause:!0,hasAudio:x(t)},...e&&{technology:C(e)}})},t.onplay=()=>d(this),t.onpause=()=>c(this),t.onvolumechange=()=>u(this))}))}static get styles(){return h(":host {\n  width: 100%;\n  height: 100%;\n  display: block;\n}\n\n/* Don't drop shadow or have radius for nested webrtc card */\n#webrtc ha-card {\n  border-radius: 0px;\n  margin: 0px;\n  box-shadow: none;\n}\n\nha-card,\ndiv.fix-safari,\n#video {\n  background: unset;\n  background-color: unset;\n}\n\n#webrtc #video {\n  object-fit: var(--frigate-card-media-layout-fit, contain);\n  object-position: var(--frigate-card-media-layout-position-x, 50%) var(--frigate-card-media-layout-position-y, 50%);\n  object-view-box: inset(var(--frigate-card-media-layout-view-box-top, 0%) var(--frigate-card-media-layout-view-box-right, 0%) var(--frigate-card-media-layout-view-box-bottom, 0%) var(--frigate-card-media-layout-view-box-left, 0%));\n}")}};l([g({attribute:!1})],V.prototype,"cameraConfig",void 0),l([g({attribute:!1})],V.prototype,"cameraEndpoints",void 0),l([g({attribute:!1})],V.prototype,"cardWideConfig",void 0),l([g({attribute:!0,type:Boolean})],V.prototype,"controls",void 0),l([m()],V.prototype,"_message",void 0),V=l([p("frigate-card-live-webrtc-card")],V);export{V as FrigateCardLiveWebRTCCard};
