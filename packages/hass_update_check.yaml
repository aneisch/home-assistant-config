# Get latest stable and beta versions
# as well as running version. Do things
# like run our current config against
# beta and stable releases to check
# compatibility and notify of available
# upgrade.

input_boolean:
  # Automation when off --> on to call upgrade
  hass_update_trigger:
    name: Upgrade HASS Now
  # Allow us to display update button on frontend when things are ready
  hass_update_available:
    name: HASS Update Available

input_text:
  hass_target_branch:
    name: HASS Target Branch

sensor:
  - platform: rest
    name: ha_github_version
    resource: "https://api.github.com/repos/home-assistant/core/releases/latest"
    headers:
      accept: application/vnd.github.v3+json
      content-type: application/json
      user-agent: home-assistant/rest-sensor
    value_template: >-
      {{ value_json.tag_name }}
    scan_interval: 1800

template:
  - trigger:
      - platform: state
        entity_id: sensor.ha_version
      - platform: homeassistant
        event: start
    binary_sensor:
      - name: HASS on Beta
        state: '{{ "b" in states("sensor.ha_version") }}'
  - trigger:
      - platform: state
        entity_id: sensor.ha_docker_version_beta
      - platform: homeassistant
        event: start
    binary_sensor:
      - name: HA Beta Available
        state: '{{ "b" in states("sensor.ha_docker_version_beta") }}'

automation:
  # Trigger GitHub action(s) when new beta version is available
  - alias: "Auto Update: Trigger Github Action BETA"
    id: "hass_github_action_beta"
    mode: queued
    initial_state: "on"
    trigger:
      - platform: state
        entity_id: sensor.ha_docker_version_beta
    condition: '{{ (trigger.from_state.state != trigger.to_state.state) and (states.sensor.ha_version.state != trigger.to_state.state) and (trigger.from_state.state not in ["unknown", "unavailable"]) and (trigger.to_state.state not in ["unknown", "unavailable"]) and "b" in trigger.to_state.state }}'
    action:
      - action: shell_command.github_action_trigger
        data:
          github_token: !secret github_token
          # https://github.com/aneisch/home-assistant-config/actions
          # Options are: beta, stable
          branch: "beta"
          release_type: >
            '{% if states('sensor.ha_docker_version_beta').split(".")[-1:][0].split("b")[0] == "0" %}major{% else %}minor{% endif %}'
          version: "{{ trigger.to_state.state }}"

  # Trigger GitHub action(s) when new stable version is available
  - alias: "Auto Update: Trigger Github Action STABLE"
    id: "hass_github_action_stable"
    mode: queued
    initial_state: "on"
    trigger:
      - platform: state
        entity_id: sensor.ha_docker_version_stable
    condition: '{{ (trigger.from_state.state != trigger.to_state.state) and (states.sensor.ha_version.state != trigger.to_state.state) and (trigger.from_state.state not in ["unknown", "unavailable"]) and (trigger.to_state.state not in ["unknown", "unavailable"]) }}'
    action:
      - action: shell_command.github_action_trigger
        data:
          github_token: !secret github_token
          # https://github.com/aneisch/home-assistant-config/actions
          # Options are: beta, stable
          branch: "stable"
          release_type: >
            '{% if states('sensor.ha_docker_version_stable').split(".")[-1:][0].split("b")[0] == "0" %}major{% else %}minor{% endif %}'
          version: "{{ trigger.to_state.state }}"

  # Respond to GitHub action to begin auto-upgrade decision flow
  - alias: "Auto Update: Github Action Callback"
    id: "auto_upgrade_boolean"
    initial_state: "on"
    trigger:
      platform: webhook
      webhook_id: !secret hass_github_action_webhook
      local_only: false
    action:
      - choose:
          - alias: Pinned Version
            conditions:
              - condition: template
                value_template: "{{ (states('input_text.hass_target_branch') not in ['stable','beta']) and (states('sensor.ha_version') != states('sensor.ha_docker_version_stable')) }}"
            sequence:
              - action: script.hass_update_notify
          - alias: Stable Minor Release
            conditions:
              - condition: template
                value_template: "{{ (states('input_text.hass_target_branch') == 'stable') and (states('sensor.ha_version') != states('sensor.ha_docker_version_stable')) and (states('sensor.ha_version').split('.')[:2] == states('sensor.ha_docker_version_stable').split('.')[:2]) }}"
            sequence:
              - action: script.hass_update_stage
          - alias: Stable Major Release
            conditions:
              - condition: template
                value_template: "{{ (states('input_text.hass_target_branch') == 'stable') and (states('sensor.ha_version') != states('sensor.ha_docker_version_stable')) }}"
            sequence:
              - action: script.hass_update_notify
          - alias: Beta Release or Major Release while on Beta
            conditions:
              - condition: template
                value_template: "{{ states('input_text.hass_target_branch') == 'beta' }}"
            sequence:
              - action: script.hass_update_stage

  # Actually try to upgrade if conditions are met (home and boolean on)
  - alias: "Auto Update: Install Update or Notify"
    id: auto_upgrade_upgrade
    mode: single
    initial_state: "on"
    trigger:
      - platform: state
        entity_id: input_boolean.hass_update_trigger
        from: "off"
        to: "on"
      - platform: state
        entity_id: person.andrew
        to: "home"
    condition: '{{ states("input_boolean.hass_update_trigger") == "on"}}'
    action:
      # Delay if triggered by occupancy
      - delay: "{% if trigger.entity_id == 'person.andrew' %}00:10:00{% else %}00:00:01{% endif %}"
      - action: >
          {% if states("person.andrew") == "home" %}
            script.hass_update_install
          {% else %}
            script.hass_update_notify
          {% endif %}

  # Maybe I updated HASS outside of this tool
  - alias: "Auto Update: Set State of input_boolean.hass_update_available at Boot"
    id: "hass_update_available_boolean"
    trigger:
      - platform: homeassistant
        event: start
    condition: '{{ states("input_boolean.hass_update_available") == "on" }}'
    action:
      - action: >
          {% if (states("sensor.ha_version") == states("sensor.ha_docker_version_stable")) or (states("sensor.ha_version") == states("sensor.ha_docker_version_beta")) %}
            homeassistant.turn_off
          {% endif %}
        entity_id:
          - input_boolean.hass_update_available
          - input_boolean.hass_update_trigger

shell_command:
  github_action_trigger: 'curl -v -X POST -u ''aneisch:{{ github_token }}'' -H ''Accept: application/vnd.github.everest-preview+json'' -H ''Content-Type: application/json'' --data ''{"event_type":"{{ branch[0]|upper}}{{branch[1:] }}: {{ release_type }} release {{ version }}", "client_payload":{"branch":"{{ branch }}","release_type":"{{ release_type }}","version":"{{ version }}"}}'' https://api.github.com/repos/aneisch/home-assistant-config/dispatches'
  update_hass: "nohup /config/scripts/update_hass.sh &"
  pull_hass: "nohup /config/scripts/pull_hass.sh &"
  switch_hass_running_branch: "nohup /config/scripts/switch_hass_running_branch.sh {{ version }} &"

script:
  # allows shell command to fail without failing whole set of actions
  update_hass_wrapper:
    sequence:
      - action: shell_command.update_hass

  hass_switch_to_version:
    alias: Switch to Version
    sequence:
      # Change docker compose image tag
      - action: shell_command.switch_hass_running_branch
        data:
          version: "{{ states('input_text.hass_target_branch') }}"
      # Pull new tag
      - action: shell_command.update_hass
      # To force sync of states
      - action: homeassistant.restart

  hass_update_stage:
    # Turn on boolean to trigger upgrade automation if we meet criteria
    sequence:
      # - action: shell_command.pull_hass
      # # Run twice because sometimes it times out /shrug
      # - action: shell_command.pull_hass
      - action: homeassistant.turn_on
        entity_id: input_boolean.hass_update_trigger
      - action: homeassistant.turn_on
        entity_id: input_boolean.hass_update_available

  hass_update_notify:
    # Notify and enable update button on frontend
    sequence:
      #- action: shell_command.pull_hass
      - action: notify.signal_homeassistant
        data:
          message: >
            Not Installing: {{ states('sensor.ha_version') }} --> {% if states('binary_sensor.hass_on_beta') == 'on' %}{{ states('sensor.ha_docker_version_beta') }}{% else %}{{ states('sensor.ha_docker_version_stable') }}{% endif %}
            Changes: https://git.io/JvkT4
            Tested: https://git.io/JvkTY
      - action: homeassistant.turn_on
        entity_id: input_boolean.hass_update_available

  hass_update_install:
    # Notify and install latest version
    sequence:
      - action: notify.signal_homeassistant
        data:
          message: >
            Installing: {{ states('sensor.ha_version') }} --> {% if states('binary_sensor.hass_on_beta') == 'on' %}{{ states('sensor.ha_docker_version_beta') }}{% else %}{{ states('sensor.ha_docker_version_stable') }}{% endif %}
            Changes: https://git.io/JvkT4 
            Tested: https://git.io/JvkTY
      - if: "{{ states('binary_sensor.hass_on_beta') == 'on' and (states('sensor.ha_docker_version_stable') == states('sensor.ha_docker_version_beta')) }}"
        then:
          - alias: "Set stable branch"
            action: input_text.set_value
            data:
              value: "stable"
            target:
              entity_id:
                - input_text.hass_target_branch
          - alias: "Switch to stable branch"
            action: shell_command.switch_hass_running_branch
            data:
              version: "{{ states('input_text.hass_target_branch') }}"
          - action: notify.signal_homeassistant
            data:
              message: >
                Auto-switched to stable build
      - delay: "00:00:05"
      - action: homeassistant.turn_off
        entity_id: input_boolean.hass_update_trigger
      - action: homeassistant.turn_off
        entity_id: input_boolean.hass_update_available
      - action: script.update_hass_wrapper
      # To force sync of input_text state
      - action: homeassistant.restart

homeassistant:
  customize:
    sensor.ha_docker_version_stable:
      icon: mdi:docker
      friendly_name: Latest Docker
    sensor.ha_docker_version_beta:
      icon: mdi:docker
      friendly_name: Beta Docker
    sensor.ha_github_version:
      icon: mdi:github
      friendly_name: Latest Github
    sensor.ha_version:
      icon: mdi:home-assistant
      friendly_name: Running Version
