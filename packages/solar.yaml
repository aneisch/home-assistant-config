# utility_meter:
#   monthly_grid_consumption:
#     name: Monthly Grid Consumption # Positive or Negative Monthly Grid Usage
#     source: # grid power sensor?
#     cycle: monthly
#     net_consumption: true

#   monthly_grid_sell:
#     name: Monthly Grid Sell # kWh sold to grid
#     source: # grid power sensor?
#     cycle: monthly
#     net_consumption: true

automation:
  # Nightly Grid Data to Google Sheet
  # Long term daily statistics, ROI, etc are calculated here
  - alias: Log Solar Data to Google Sheets
    trigger:
      - platform: time
        at: "23:59:00"
    action:
      - service: google_sheets.append_sheet
        data:
          worksheet: "Data"
          config_entry: 01JYQN4AYGRQ9S6WQBJV4T4CBW
          data:
            Date: "{{ now().strftime('%m-%d-%Y') }}"
            Day Grid Import kWh: "{{ float(states('sensor.solark_sol_ark_day_grid_import', rounded=True), default=0) }}"
            Day Grid Export kWh: "{{ float(states('sensor.solark_sol_ark_day_grid_export', rounded=True), default=0) }}"
            Day PV Production kWh: "{{ float(states('sensor.solark_sol_ark_day_pv_energy', rounded=True), default=0) }}"
            Day Battery Charge kWh: "{{ float(states('sensor.solark_sol_ark_day_battery_charge', rounded=True), default=0) }}"
            Day Battery Discharge kWh: "{{ float(states('sensor.solark_sol_ark_day_battery_discharge', rounded=True), default=0) }}"
            Day Total Load Energy kWh: "{{ float(states('sensor.solark_sol_ark_day_load_energy', rounded=True), default=0) }}"
            Day EV kWh: "{{ float(states('sensor.tesla_energy_today', rounded=True), default=0) }}"
            Day HVAC kWh: "{{ float(states('sensor.ac_compressor_daily_energy', rounded=True), default=0) + float(states('sensor.attic_hvac_daily_energy', rounded=True), default=0) }}"
            Day Avoided kWh (load - import): "{{ float(states('sensor.solark_sol_ark_day_load_energy_local', rounded=True), default=0) - float(states('sensor.solark_sol_ark_day_grid_import', rounded=True), default=0) }}"

sensor:
  - platform: template
    sensors:
      battery_cap:
        friendly_name: "Home Battery Capacity"
        value_template: >
          {% set grid_online = states('binary_sensor.solark_sol_ark_grid_connected_status') %}
          {% if grid_online  == 'off'%}
            {{ states('sensor.solark_sol_ark_battery_capacity_shutdown') | int }}
          {% else %}
            {% set now = strptime(as_timestamp(now()) | timestamp_custom('%H:%M'), '%H:%M') %}
            {% set sellTime1 = strptime(states('sensor.solark_sol_ark_time_slot_1'), '%H:%M') %}
            {% if now >= sellTime1 and now < sellTime2 %}
              {{ states('number.solark_sol_ark_prog1_capacity') | int }}
            {% else %}
              {{ states('sensor.solark_sol_ark_battery_capacity_shutdown') | int }}
            {% endif %}
          {% endif %}
      soc_battery_time_left:
        friendly_name: "Home Battery Depletion Seconds"
        unit_of_measurement: Seconds
        value_template: >
          {% set state = states('sensor.solark_sol_ark_battery_power') | int %}
          {% set cap = states('sensor.battery_cap') | float %}
          {% if state == 0 -%}
          {{ ((((states('sensor.solark_sol_ark_battery_soc') | float - cap) /100) * 28680) / (1) * 60 * 60 ) | timestamp_custom('%s', 0) }}
          {%- else -%}
          {{ ((((states('sensor.solark_sol_ark_battery_soc') | float - cap) /100) * 28680) / (states('sensor.solark_sol_ark_battery_power') | float) * 60 * 60 ) | timestamp_custom('%s', 0) }}
          {%- endif %}
      soc_battery_time_left_friendly:
        friendly_name: "Home Battery Depletion Time"
        value_template: >
          {% set state = states('sensor.solark_sol_ark_battery_power') | int %}
          {% if state > 0 -%}
          {%- set time = states('sensor.soc_battery_time_left') | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{} minutes'.format(minutes) if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{} hours, '.format(hours) if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{} day, '.format(days) if days > 0 else '' %}
          {{ 'Less than 1 minute' if time < 60 else days + hours + minutes }}
          {%- else -%}
          {{ 'Charging' }}
          {%- endif %}
      battery_charging_time_left:
        friendly_name: "Home Battery Charging Time Left"
        unit_of_measurement: Seconds
        value_template: >
          {% set power = states('sensor.solark_sol_ark_battery_power') | float %}
          {% set soc = states('sensor.solark_sol_ark_battery_soc') | float %}
          {% set cap = states('sensor.battery_cap') | float %}
          {% if power < 0 %}
            {% if soc < cap %}
              {{ ((((cap - soc) / 100) * 28680) / (-power) * 60 * 60) | int }}
            {% else %}
              {{ ((((100 - soc) / 100) * 28680) / (-power) * 60 * 60) | int }}
            {% endif %}
          {% else %}
            0
          {% endif %}
      battery_charging_time_left_friendly:
        friendly_name: "Home Battery Charging Time"
        value_template: >
          {% set state = states('sensor.solark_sol_ark_battery_power') | int %}
          {% if state < 0 -%}
            {%- set time = states('sensor.battery_charging_time_left') | int %}
            {%- set minutes = ((time % 3600) // 60) %}
            {%- set minutes = '{} min'.format(minutes) if minutes > 0 else '' %}
            {%- set hours = ((time % 86400) // 3600) %}
            {%- set hours = '{} hrs, '.format(hours) if hours > 0 else '' %}
            {%- set days = (time // 86400) %}
            {%- set days = '{} day, '.format(days) if days > 0 else '' %}
            {{ 'Floating' if time < 60 else days + hours + minutes }}
          {%- else -%}
            {{ 'Discharging' }}
          {%- endif %}
      markdown_battery_charge_time_left:
        friendly_name: "Markdown Home Battery Charging Time"
        value_template: >
          {% if states('sensor.solark_sol_ark_battery_soc') | float < states('sensor.battery_cap') | float %}
            {{ states('sensor.battery_cap') | float | round(0) }}
          {% else %}
            100
            {% endif %}
      markdown_discharge_time:
        friendly_name: "Markdown Home Battery Discharge Time"
        value_template: >
          {% set now = as_timestamp(now()) %}
          {% set add = states('sensor.soc_battery_time_left') | int %}
          {% set future_time = now + add %}
            {{ future_time | timestamp_custom('%H:%M') }}
      markdown_charge_time:
        friendly_name: "Markdown Home Battery Charging Time"
        value_template: >
          {% set now = as_timestamp(now()) %}
          {% set add = states('sensor.battery_charging_time_left') | int %}
          {% set future_time = now + add %}
            {{ future_time | timestamp_custom('%H:%M') }}
