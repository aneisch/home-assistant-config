automation:
  - alias: Frigate Person Offsite
    id: "frigate_person_offsite"
    mode: queued
    trigger:
      - platform: mqtt
        topic: frigate/events
        payload: true
        value_template: "{{ value_json.type == 'end' and value_json.after.label == 'person' }}"
    action:
      - delay: '00:00:05'
      - action: shell_command.frigate_clips_drive
        data:
          clip_id: "{{trigger.payload_json['after']['id']}}"

  - alias: Frigate Smoke Alarm Offsite
    id: "frigate_smokealarm_offsite"
    mode: queued
    trigger:
      - platform: mqtt
        topic: frigate/reviews
        payload: true
        value_template: "{{ value_json.type == 'end' and 'SmokeAlarm' in value_json.before.data.objects }}"
    action:
      - delay: '00:00:05'
      - action: shell_command.frigate_clips_drive
        data:
          clip_id: "{{trigger.payload_json['before']['id']}}"

  - alias: Frigate Notification Person
    id: "frigate_notification_person"
    mode: parallel
    variables:
      generated_content: " "
    trigger:
      - platform: mqtt
        topic: frigate/events
        payload: true
        value_template: "{{ value_json.type == 'new' and value_json.after.label == 'person' }}"
    #condition: "{{ trigger.payload_json['after']['label'] == 'person' }}"
    action:
      # if home and person detection front door during the day then notify
      - if: "{{ is_state('input_boolean.security_status', 'off') and trigger.payload_json['after']['camera'] == 'front_door' and is_state('input_boolean.goodnight', 'off') }}"
        then:
          - if: "{{ is_state('binary_sensor.weasel_active', 'on') }}"
            then:
              - action: shell_command.weasel_shortcut
                data:
                  shortcut: open-front-door-cam-weasel
              # - action: fully_kiosk.load_url
              #   target:
              #     device_id: a9b4de2022c90a1541cdf60f9506bae8
              #   data:
              #     url: !secret frontdoor_url
              # - delay: '00:00:30'
              # - action: fully_kiosk.load_url
              #   target:
              #     device_id: a9b4de2022c90a1541cdf60f9506bae8
              #   data:
              #     url: http://10.0.1.22:8123/lovelace/tablet 
          - action: camera.snapshot
            data:
              filename: /config/media/images/front_door.jpg
            target:
              entity_id: camera.front_door_fullres
              # http://localhost:1984/api/frame.jpeg?src=front_door_fullres changed generic camera url from this
          - delay: 00:00:03
          - action: google_generative_ai_conversation.generate_content
            continue_on_error: true
            data:
              prompt: >-
                Very briefly describe what you see in this image from my doorbell camera.
                Your message needs to be short to fit in a phone notification. Don't
                describe stationary objects or buildings.
              filenames: /config/media/images/front_door.jpg
            response_variable: generated_content
          - action: notify.signal_frigate
            data:
              message: >-
                A person was detected {{ generated_content.text }}


                Clip: https://secret/api/frigate/notifications/{{trigger.payload_json["after"]["id"]}}/clip.mp4


                Stream: https://secret/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'].lower()}}?token={{state_attr( 'camera.' ~ trigger.payload_json['after']['camera'].lower(), 'access_token')}}
              data:
                attachments:
                  - /config/media/images/front_door.jpg
          - action: notify.alexa_media_kitchen
            data:
              data:
                type: tts
                method: speak
              message: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/bell_03"/>
          # - action: notify.alexa_media_kitchen
          #   data:
          #     data:
          #       type: tts
          #     message: "{{ generated_content.text }}"

      # if not home or sleeping time and person detection anywhere then notify
      - if: "{{ is_state('input_boolean.security_status', 'on') or is_state('input_boolean.goodnight', 'on') }}"
        then:
          - if: "{{ trigger.payload_json['after']['camera'] != 'front_door' }}"
            then:
              - action: notify.signal_frigate
                data:
                  message: >-
                    A person was detected.


                    Clip: https://secret/api/frigate/notifications/{{trigger.payload_json["after"]["id"]}}/clip.mp4


                    Stream: https://secret/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'].lower()}}?token={{state_attr( 'camera.' ~ trigger.payload_json['after']['camera'].lower(), 'access_token')}}
                  data:
                    urls:
                      - http://localhost:8123/api/frigate/notifications/{{trigger.payload_json["after"]["id"]}}/snapshot.jpg?bbox=1&timestamp=1&quality=100
              #- delay: '00:00:10'
            else:
              - action: camera.snapshot
                data:
                  filename: /config/media/images/front_door.jpg
                target:
                  entity_id: camera.front_door_fullres
              - delay: 00:00:03
              - action: google_generative_ai_conversation.generate_content
                continue_on_error: true
                data:
                  prompt: >-
                    Very briefly describe what you see in this image from my doorbell camera.
                    Your message needs to be short to fit in a phone notification. Don't
                    describe stationary objects or buildings.
                  filenames: /config/media/images/front_door.jpg
                response_variable: generated_content
              - action: notify.signal_frigate
                data:
                  message: >-
                    A person was detected {{ generated_content.text }}


                    Clip: https://secret/api/frigate/notifications/{{trigger.payload_json["after"]["id"]}}/clip.mp4


                    Stream: https://secret/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'].lower()}}?token={{state_attr( 'camera.' ~ trigger.payload_json['after']['camera'].lower(), 'access_token')}}
                  data:
                    attachments:
                      - /config/media/images/front_door.jpg
              #- delay: '00:00:10'

  # - alias: Front Door on Photo Frame
  #   id: "front_door_on_photo_frame"
  #   mode: 'single'
  #   trigger:
  #     - platform: mqtt
  #       topic: frigate/events
  #       payload: true
  #       value_template: "{{ value_json.type == 'new' and value_json.after.label == 'person' and value_json.after.camera == 'front_door' }}"
  #     - platform: state
  #       entity_id: binary_sensor.front_door_button_pressed
  #       to: "on"
  #   condition: "{{ states('media_player.kitchen_photo_frame') != 'off' }}"
  #   action:
  #     - action: script.photo_frame_launch_front_door_stream
  #       data:
  #         delay: "00:00:30" # How long to show video
  #         entity_id: 
  #           - media_player.kitchen_photo_frame
  #           - media_player.office_photo_frame

  - alias: Frigate Notification USPS
    id: "frigate_notification_usps"
    mode: single
    trigger:
      - platform: webhook
        webhook_id: "usps_mail_detected"
        allowed_methods:
          - POST
        local_only: true
    action:
      - variables:
          my_camera_id: camera.usps_vehicle
      - action: input_datetime.set_datetime
        data:
          entity_id: "input_datetime.usps_last"
          time: "{{ ((as_timestamp(now())) | timestamp_custom('%H:%M:%S', true)) }}"
          date: "{{ (as_timestamp(now()) | timestamp_custom('%Y-%m-%d', true)) }}"
      - action: camera.snapshot
        data:
          filename: /config/media/images/{{ my_camera_id }}/{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg
        target:
          entity_id:
            - '{{ my_camera_id }}'
      - if: "{{ states('sensor.mail_usps_delivering') | int > 0 or states('sensor.mail_usps_mail') | int > 0}}"
        then:
          - action: notify.alexa_media
            continue_on_error: true
            data:
              message: "<audio src='https://vps.secret/mail.mp3'/>"
              data:
                type: tts
              target: media_player.kitchen
      - action: notify.signal_homeassistant
        data:
          message: "USPS detected"
          data:
            attachments:
              - /config/media/images/logo.jpg
      - delay: "00:01:00"

  # - alias: Frigate Notification Deliveries
  #   id: "frigate_notification_deliveries"
  #   mode: single
  #   trigger:
  #     - platform: mqtt
  #       topic: frigate/events
  #       payload: update
  #       value_template: "{{ value_json.type }}"
  #     - platform: mqtt
  #       topic: frigate/events
  #       payload: end
  #       value_template: "{{ value_json.type }}"
  #   condition: "{{ trigger.payload_json['after']['sub_label'] != 'Undefined' or trigger.payload_json['after']['label'] == 'PrimeAir'  }}"
  #   action:
  #     - if: "{{ 'usps' in  trigger.payload_json['after']['sub_label'] }}"
  #       then: 
  #         - action: input_datetime.set_datetime
  #           data:
  #             entity_id: "input_datetime.usps_last"
  #             time: "{{ ((as_timestamp(now())) | timestamp_custom('%H:%M:%S', true)) }}"
  #             date: "{{ (as_timestamp(now()) | timestamp_custom('%Y-%m-%d', true)) }}"
  #         - action: notify.signal_homeassistant
  #           data:
  #             message: "USPS detected"
  #             data:
  #               attachments:
  #                 - /config/media/images/logo.jpg
  #         - if: "{{ states('sensor.mail_usps_delivering') | int > 0 or states('sensor.mail_usps_mail') | int > 0}}"
  #           then:
  #             - action: notify.alexa_media
  #               data:
  #                 message: "<audio src='https://vps.secret/mail.mp3'/>"
  #                 data:
  #                   type: tts
  #                 target: media_player.kitchen
  #         - action: camera.snapshot
  #           data:
  #             filename: /config/media/images/{{ '{{ entity_id.entity_id }}' }}/{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg
  #           target:
  #             entity_id:
  #               - camera.usps_vehicle
  #         - action: shell_command.create_timelapse
  #           data:
  #             camera: usps_vehicle
  #         - delay: "00:02:00"


  #     - if: "{{ 'PrimeAir' in  trigger.payload_json['after']['label'] }}"
  #       then: 
  #         - action: notify.signal_homeassistant
  #           data:
  #             message: "Prime Air Drone detected"
  #             data:
  #               attachments:
  #                 - /config/media/images/logo.jpg

  - alias: Doorbell Ring
    id: "frigate_doorbell_ring"
    mode: single
    variables:
      generated_content: " "
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door_button_pressed
        to: "on"
    action:
      - action: camera.snapshot
        data:
          filename: /config/media/images/doorbell.jpg
        target:
          entity_id: camera.front_door_fullres
        continue_on_error: true
      #- delay: 00:00:03
      - action: siren.turn_on
        entity_id: siren.garage_chime_siren
        continue_on_error: true
      # - action: google_generative_ai_conversation.generate_content
      #   continue_on_error: true
      #   data:
      #     prompt: >-
      #       Very briefly describe what you see in this image from my doorbell camera.
      #       Your message needs to be short to fit in a phone notification. Don't
      #       describe stationary objects or buildings.
      #     filenames: /config/media/images/.jpg
      #   response_variable: generated_content
      - action: notify.signal_frigate
        data:
          message: >-
            Doorbell ring! {{ generated_content.text }}


            Talk Live (you'll have to unmute audio, mic always live!): https://frigate.secret/live/webrtc/webrtc.html?src=front_door_twoway&media=video+audio+microphone
          data:
            attachments:
              - /config/media/images/front_door.jpg
      # Mirror to WearOS
      - action: notify.mobile_app_galaxy_watch6_kqbw
        data:
          message: >-
            Doorbell! {{ generated_content.text }}
          data:
            ttl: 0
            priority: high
      # - if: "{{ is_state('binary_sensor.weasel_active', 'on') }}"
      #   then:
      #     - action: shell_command.weasel_shortcut
      #       data:
      #         shortcut: open-front-door-cam-weasel

  - alias: Frigate Notification Snooze
    id: "frigate_notification_snooze"
    mode: single
    trigger:
      - platform: event
        id: start
        event_type:
          - timer.started
          - timer.restarted
        event_data:
          entity_id: timer.frigate_notification_snooze
      - platform: event
        id: finish
        event_type: 
          - timer.finished
          - timer.cancelled
        event_data:
          entity_id: timer.frigate_notification_snooze
      - platform: state
        entity_id: automation.frigate_notification_person
        to:
          - "on"
          - "off"
        id: manual
    action:
      - if: "{{ trigger.id == 'start' }}"
        then:
          - action: homeassistant.turn_off
            entity_id: automation.frigate_notification_person
          - delay: "00:00:01"

      - if: "{{ trigger.id == 'finish' }}"
        then:
          - action: homeassistant.turn_on
            entity_id: automation.frigate_notification_person
          - action: timer.cancel
            entity_id: timer.frigate_notification_snooze
          - delay: "00:00:01"

      - if: "{{ trigger.id == 'manual' }}"
        then:
          - action: timer.cancel
            entity_id: timer.frigate_notification_snooze

  - alias: Frigate Notification Snooze Door
    id: "frigate_notification_snooze_door"
    mode: single
    trigger:
      - platform: state
        id: front_door
        entity_id: binary_sensor.front_door
        to: "on"
      - platform: event
        id: unlock
        event_type: call_service
        event_data:
          domain: lock
          action: unlock
          service_data:
            entity_id: lock.front_door
    action:
      - if: "{{ trigger.id == 'front_door' and is_state('group.trackers', 'home') and is_state('automation.frigate_notification_person', 'on') }}"
        then:
          - action: timer.start
            data:
              duration: "00:05:00"
            target:
              entity_id: timer.frigate_notification_snooze

      - if: "{{ trigger.id == 'unlock' }}"
        then:
          - action: timer.start
            data:
              duration: "00:02:00"
            target:
              entity_id: timer.frigate_notification_snooze

  - alias: Front Door Security Light
    id: "frigate_front_door_security_light"
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door_person_occupancy
    condition: "{{ is_state('sun.sun', 'below_horizon')}}"
    action:
      - action: select.select_option
        data:
          option: "{% if trigger.to_state.state == 'on' %}On{% elif trigger.to_state.state == 'off' %}Off{% endif %}"
        target:
          entity_id: select.front_door_security_light

  - alias: Frigate Event Creation
    id: "frigate_event_creation"
    mode: single
    trigger:
      - platform: state
        id: garage_door
        entity_id: cover.garage_door
        from: 'closed'
        to: 'open'
      - platform: state
        id: doorbell
        entity_id: binary_sensor.front_door_button_pressed
        from: 'off'
        to: 'on'
      - platform: state
        id: front_door
        entity_id: binary_sensor.front_door
        from: 'off'
        to: 'on'
      - platform: state
        id: back_door
        entity_id: binary_sensor.back_porch_door
        from: 'off'
        to: 'on'
      - platform: state
        id: garage_exterior_door
        entity_id: binary_sensor.garage_exterior_door
        from: 'off'
        to: 'on'
      - platform: state
        id: garage_interior_door
        entity_id: binary_sensor.garage_interior_door
        from: 'off'
        to: 'on'
      - platform: state
        id: smoke_alarm
        entity_id: binary_sensor.hardwired_smoke_alarms_smoke_detected
        from: 'off'
        to: 'on'
    #condition: "{{ is_state('input_boolean.security_status','on') }}"
    action:
      - if: "{{ trigger.id == 'garage_door' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: garage
              label: GarageDoorOpened
          - action: shell_command.frigate_create_event
            data:
              camera: driveway
              label: GarageDoorOpened
      - if: "{{ trigger.id == 'doorbell' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: front_door
              label: Doorbell
      - if: "{{ trigger.id == 'front_door' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: front_door
              label: FrontDoorOpened
      - if: "{{ trigger.id == 'back_door' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: back_porch
              label: BackDoorOpened
      - if: "{{ trigger.id == 'garage_exterior_door' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: garage
              label: GarageExteriorDoorOpened
      - if: "{{ trigger.id == 'garage_interior_door' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: garage
              label: GarageInteriorDoorOpened
      - if: "{{ trigger.id == 'smoke_alarm' }}"
        then:
          - action: shell_command.frigate_create_event
            data:
              camera: garage
              label: SmokeAlarm
          - action: shell_command.frigate_create_event
            data:
              camera: back_porch
              label: SmokeAlarm
          - action: shell_command.frigate_create_event
            data:
              camera: driveway
              label: SmokeAlarm

  # Handled by NodeRed
  # - alias: Frigate Timelapse Snapshots
  #   id: "frigate_timelapse_snapshots"
  #   mode: single
  #   trigger:
  #     - platform: time
  #       at: "10:00:00"
  #     - platform: time
  #       at: "14:00:00"
  #     - platform: time
  #       at: "18:00:00"
  #   action:
  #     - action: camera.snapshot
  #       data:
  #         filename: /config/media/images/{{ '{{ entity_id.entity_id }}' }}/{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg
  #       target:
  #         entity_id:
  #           - camera.ptz
  #           - camera.front_door
  #           - casmera.driveway
  #           - camera.back_porch

  - alias: Frigate Timelapse Creation
    id: "frigate_timelapse_creation"
    mode: single
    trigger:
      - platform: time
        at: "20:00:00"
    action:
      - action: shell_command.create_timelapse
        data:
          camera: back_porch
      - action: shell_command.create_timelapse
        data:
          camera: front_door
      - action: shell_command.create_timelapse
        data:
          camera: driveway
      # - action: shell_command.create_timelapse
      #   data:
      #     camera: ptz
      - action: shell_command.create_timelapse
        data:
          camera: bullet

  - alias: Frigate Daily Restart
    id: "frigate_restart"
    trigger:
      platform: time
      at: "09:00:00"
    action:
      - action: mqtt.publish
        data:
          qos: 0
          retain: false
          topic: frigate/restart

  - alias: Frigate Healthcheck
    id: "frigate_healthcheck"
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.frigate_status
        from: running
        for: 00:05:00
    action:
      - action: script.notify_wrapper
        data:
          message: "Frigate has been unavailable for more than five minutes"

# camera:
#   - platform: local_file
#     file_path: /config/timelapse/front_door.mp4
#     name: Front Porch Timelapse
#   - platform: local_file
#     file_path: /config/timelapse/back_porch.mp4
#     name: Back Porch Timelapse
#   - platform: local_file
#     file_path: /config/timelapse/driveway.mp4
#     name: Driveway Timelapse
#   - platform: local_file
#     file_path: /config/timelapse/ptz.mp4
#     name: PTZ Timelapse

binary_sensor:
  - platform: template
    sensors:
      # On if any cameras have object detection "off"
      any_object_detection_disabled:
        value_template: "{{ is_state('switch.front_door_detect', 'off') or is_state('switch.garage_detect', 'off') or is_state('switch.driveway_detect', 'off') or is_state('switch.back_porch_detect', 'off') }}"

command_line:
  - switch:
      name: Back Porch Camera White Light
      command_on: >
        curl --silent --digest -g "http://USERNAME:PASSWORD@10.0.0.32/cgi-bin/coaxialControlIO.cgi?action=control&channel=1&info[0].Type=1&info[0].IO=1"
      command_off: >
        curl --silent --digest -g "http://USERNAME:PASSWORD@10.0.0.32/cgi-bin/coaxialControlIO.cgi?action=control&channel=1&info[0].Type=1&info[0].IO=0"
      command_state: >
        curl --silent --digest -g "http://USERNAME:PASSWORD@10.0.0.32/cgi-bin/coaxialControlIO.cgi?action=getStatus&channel=0" | grep -q "status.status.WhiteLight=On"

input_datetime:
  usps_last:
    name: Last USPS Detection
    has_date: true
    has_time: true

input_text:
  qr_code_content:

shell_command:
  frigate_clips_drive: /config/scripts/frigate_clips_drive.sh {{ clip_id }}
  frigate_create_event: /config/scripts/frigate_event_create.sh {{camera}} {{label}}
  create_timelapse: /config/scripts/frigate_timelapse.sh {{ camera }}
  commit_frigate_changes: ssh nuc '/opt/homeassistant/scripts/commit_frigate_changes.sh'
  # get_timelapse_snapshot: /config/scripts/get_timelapse_snapshot.sh {{ camera }}

timer:
  frigate_notification_snooze:
    duration: "00:00:00"
    restore: True

media_player:
  - platform: webrtc
    name: Doorbell
    stream: front_door_twoway
    audio: pcma

# Eg:
# - action: media_player.play_media
#   target:
#     entity_id: media_player.doorbell
#   data:
#     media_content_id: media-source://media_source/media/audio.mp3
#     media_content_type: audio/mpeg

script:
  # get_timelapse_snapshots:
  #   sequence:
  #     - action: shell_command.get_timelapse_snapshot
  #       data:
  #         camera: driveway
  #         height: 480
  #         width: 704
  #         file: '{{ "/config/media/images/camera.driveway" + "/" +  now().strftime("%Y%m%d-%H%M%S") + ".jpg" }}'

  doorbell_not_interested:
    sequence:
      # - action: tts.speak
      #   target:
      #     entity_id: tts.google_en_com
      #   data:
      #     cache: false
      #     media_player_entity_id: media_player.doorbell
      #     message: "Hello. We are not interested. We hope you have a nice day!"
      - action: media_player.play_media
        target:
          entity_id: media_player.doorbell
        data:
          media_content_id: media-source://tts/microsoft?message=Hello.+We+are+not+interested.+We+hope+you+have+a+nice+day!
          media_content_type: provider
          announce: True
