automation:
  # - alias: "Electric Outage Alert"
  #   id: "electric_outage_alert"
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.ups_status
  #       from: "ONLINE"
  #     - platform: state
  #       entity_id: binary_sensor.solark_sol_ark_grid_connected_status
  #       to: "off"
  #   condition: "{{ trigger.from_state.state not in ['unavailable', 'unknown']}}"
  #   action:
  #     - action: script.notify_wrapper
  #       data:
  #         message: "{{ trigger.to_state.attributes.friendly_name }} {{ trigger.from_state.state }} {{ trigger.to_state.state }}: {{ now().strftime('%Y-%m-%d %T') }}"

  - alias: "Electric Outage and Recovery"
    id: "electric_outage_and_recovery"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        #to: "ONLINE"
      - platform: state
        entity_id: binary_sensor.solark_sol_ark_grid_connected_status
        #to: "on"
    condition: "{{ trigger.from_state.state not in ['unavailable', 'unknown']}}"
    action:
      - action: script.notify_wrapper
        data:
          message: >
            {% if trigger.from_state.state in ["ONBATT", "off"] %}
              {{ trigger.to_state.attributes.friendly_name }} {{ trigger.to_state.state }}: {{ now().strftime('%Y-%m-%d %T') }}. Outaged lasted {{ time_since(trigger.from_state.last_changed) }}
            {% else %}
              {{ trigger.to_state.attributes.friendly_name }} {{ trigger.to_state.state }}: {{ now().strftime('%Y-%m-%d %T') }}
            {% endif %}

  - alias: "Turn Off NAS After 5 Minute Outage"
    id: "nas_off_ups_outage"
    trigger:
      platform: state
      entity_id: sensor.ups_status
      to: "ONBATT"
      for:
        minutes: 3
    condition:
      condition: state
      entity_id: switch.nas
      state: "on"
    action:
      - action: notify.cellular_message
        data:
          message: "{{ trigger.to_state.attributes.friendly_name }} battery at {{ states('sensor.ups_battery') }}%. Initiaiting NAS shutdown."
      - action: switch.turn_off
        entity_id: switch.nas

  - alias: "Containers Off With Outage"
    id: "containers_off_ups_outage"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        #from: "ONLINE"
        to: "ONBATT"
        for:
          minutes: 3
    action:
      - action: homeassistant.turn_off
        entity_id:
          - switch.docker_zwavejs
          - switch.docker_vscode
          - switch.docker_thermostat_api_server
          - switch.docker_esphome
          - switch.docker_grafana

  - alias: "Containers On With Restore"
    id: "containers_on_ups_restore"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        #from: "ONBATT"
        to: "ONLINE"
        for:
          seconds: 30
    action:
      - action: homeassistant.turn_on
        entity_id:
          - switch.docker_zwavejs
          - switch.docker_vscode
          - switch.docker_thermostat_api_server
          - switch.docker_nodered
          - switch.docker_appdaemon

  - alias: "Turn Off NUC When <10 Minutes Remain"
    id: "nuc_off_ups_critical"
    trigger:
      platform: numeric_state
      entity_id: sensor.ups_time_left
      below: 10
    condition: "{{ statest('sensor.ups_status') != 'ONLINE' }}"
    action:
      - action: notify.cellular_message
        data:
          message: "{{ trigger.to_state.attributes.friendly_name }} battery at {{ states('sensor.ups_battery') }}%. Issued NUC shutdown 2 minutes from now. Cancel with sudo shutdown -c"
      - action: shell_command.nuc_poweroff

homeassistant:
  customize:
    sensor.ups_battery:
      friendly_name: UPS Battery
    sensor.ups_load:
      friendly_name: UPS Load
    sensor.ups_status:
      friendly_name: UPS Status
    sensor.ups_time_left:
      friendly_name: UPS Time Left
